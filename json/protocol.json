{
    "version": {
        "major": "0",
        "minor": "1"
    },
    "domains": [
        {
            "domain": "Recording",
            "description": "The Recording domain defines methods for managing recordings.",
            "types": [
                {
                    "id": "RecordingId",
                    "description": "Globally unique identifier for a recording.",
                    "type": "string"
                },
                {
                    "id": "BuildId",
                    "description": "Unique identifier for the software used to produce a recording.",
                    "type": "string"
                },
                {
                    "id": "TimeStamp",
                    "description": "A point in time within a recording, specified as the elapsed time in\nmilliseconds since the recording started. Sub-millisecond resolution\nis possible.",
                    "type": "number"
                },
                {
                    "id": "TimeRange",
                    "description": "Description for a range of time within a recording.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "begin",
                            "$ref": "TimeStamp"
                        },
                        {
                            "name": "end",
                            "$ref": "TimeStamp"
                        }
                    ]
                },
                {
                    "id": "ExecutionPoint",
                    "description": "Identifier for a point within a recording at which the program state can be\ninspected. Execution points are integers encoded as base-10 numeric strings,\nsuch that smaller numbered points precede larger numbered ones. They can be\ncompared by e.g. converting to BigInts and then comparing those BigInts.",
                    "type": "string"
                },
                {
                    "id": "TimeStampedPoint",
                    "description": "An execution point and its associated time stamp. Recordings always have a\nbeginning execution point with value \"0\" and a time stamp of zero.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "point",
                            "$ref": "ExecutionPoint"
                        },
                        {
                            "name": "time",
                            "$ref": "TimeStamp"
                        }
                    ]
                },
                {
                    "id": "MouseEvent",
                    "description": "A mouse event that occurs somewhere in a recording.",
                    "$ref": "TimeStampedPoint",
                    "properties": [
                        {
                            "name": "kind",
                            "description": "Kind of mouse event.",
                            "$ref": "MouseEventKind"
                        },
                        {
                            "name": "clientX",
                            "description": "X coordinate of the event, relative to the upper left of the page's main window.",
                            "type": "integer"
                        },
                        {
                            "name": "clientY",
                            "description": "Y coordinate of the event, relative to the upper left of the page's main window.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "id": "MouseEventKind",
                    "description": "Kinds of mouse events described in a recording.",
                    "type": "string",
                    "enum": [
                        "mousemove",
                        "mousedown"
                    ]
                }
            ],
            "commands": [
                {
                    "name": "getDescription",
                    "description": "Get a description of a recording.",
                    "parameters": [
                        {
                            "name": "recordingId",
                            "description": "Recording to get the description for.",
                            "$ref": "RecordingId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "duration",
                            "description": "Duration of the recording.",
                            "$ref": "TimeStamp"
                        },
                        {
                            "name": "length",
                            "description": "Byte length of the recording.",
                            "type": "integer"
                        },
                        {
                            "name": "lastScreen",
                            "description": "Painted graphics at the end of the recording.",
                            "optional": true,
                            "$ref": "Graphics.ScreenShot"
                        }
                    ]
                },
                {
                    "name": "createSession",
                    "description": "Create a session for inspecting a recording. This command does not return\nuntil the recording's description and contents have been fully received.\nIf the description/contents are incomplete, <code>uploadedData</code> events\nwill be periodically emitted before the command returns.",
                    "parameters": [
                        {
                            "name": "recordingId",
                            "description": "Recording to load into the session.",
                            "$ref": "RecordingId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "sessionId",
                            "description": "Identifier for the new session.",
                            "$ref": "Session.SessionId"
                        }
                    ]
                },
                {
                    "name": "releaseSession",
                    "description": "Release a session and allow its resources to be reclaimed.",
                    "parameters": [
                        {
                            "name": "sessionId",
                            "description": "Session to release.",
                            "$ref": "Session.SessionId"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "uploadedData",
                    "description": "Describes how much of a recording's data has been uploaded to the cloud service.",
                    "parameters": [
                        {
                            "name": "recordingId",
                            "description": "Recording being described.",
                            "$ref": "RecordingId"
                        },
                        {
                            "name": "byteCount",
                            "description": "How many bytes of recording data have been received by the cloud service.",
                            "type": "integer"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Session",
            "description": "The Session domain defines methods for using recording sessions. In order to\ninspect a recording, it must first be loaded into a session via\n<code>Recording.createSession</code>.\n\nAfter the session is created, it is an unprocessed state. Commands sent using\nthe session to query information about the recording will only find\ninformation about parts of the recording that have been processed. Processing\nstarts automatically after the session is created.\n\n<br><br>All commands and events in this domain must include a <code>sessionId</code>.",
            "types": [
                {
                    "id": "SessionId",
                    "description": "Unique identifier for a session which a recording has been loaded into.",
                    "type": "string"
                }
            ],
            "commands": [
                {
                    "name": "ensureProcessed",
                    "description": "Does not return until the recording is fully processed. Before returning,\n<code>missingRegions</code> and <code>unprocessedRegions</code> events will\nbe periodically emitted."
                },
                {
                    "name": "findMouseEvents",
                    "description": "Find all points in the recording at which a mouse move or click occurred.\nDoes not return until the recording is fully processed. Before returning,\n<code>mouseEvents</code> events will be periodically emitted. The union\nof all these events describes all mouse events in the recording."
                },
                {
                    "name": "getEndpoint",
                    "description": "Get the last execution point in the recording.",
                    "returns": [
                        {
                            "name": "endpoint",
                            "$ref": "Recording.TimeStampedPoint"
                        }
                    ]
                },
                {
                    "name": "createPause",
                    "description": "Create a pause describing the state at an execution point.",
                    "parameters": [
                        {
                            "name": "point",
                            "description": "Point to create the pause at.",
                            "$ref": "Recording.ExecutionPoint"
                        }
                    ],
                    "returns": [
                        {
                            "name": "pauseId",
                            "description": "Identifier for the new pause.",
                            "$ref": "Pause.PauseId"
                        },
                        {
                            "name": "stack",
                            "description": "IDs of all frames on the stack. Omitted if there are no\nframes on the stack at this point.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Pause.FrameId"
                            }
                        },
                        {
                            "name": "data",
                            "description": "Data describing the frames on the stack and the in scope\nvariables of the topmost frame.",
                            "$ref": "Pause.PauseData"
                        }
                    ]
                },
                {
                    "name": "releasePause",
                    "description": "Release a pause and allow its resources to be reclaimed.",
                    "parameters": [
                        {
                            "name": "pauseId",
                            "$ref": "Pause.PauseId"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "missingRegions",
                    "description": "Event describing regions of the recording that have not been uploaded.",
                    "parameters": [
                        {
                            "name": "regions",
                            "description": "Regions that have not been uploaded.",
                            "type": "array",
                            "items": {
                                "$ref": "Recording.TimeRange"
                            }
                        }
                    ]
                },
                {
                    "name": "unprocessedRegions",
                    "description": "Event describing regions of the recording that have not been processed.",
                    "parameters": [
                        {
                            "name": "regions",
                            "description": "Any missing regions are also unprocessed regions.",
                            "type": "array",
                            "items": {
                                "$ref": "Recording.TimeRange"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseEvents",
                    "description": "Describes some mouse events that occur in the recording.",
                    "parameters": [
                        {
                            "name": "events",
                            "type": "array",
                            "items": {
                                "$ref": "Recording.MouseEvent"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Graphics",
            "description": "The Graphics domain defines methods for accessing a recording's graphics data.\n\n<br><br>All commands and events in this domain must include a <code>sessionId</code>.",
            "commands": [
                {
                    "name": "findPaints",
                    "description": "Find all points in the recording at which paints occurred. Does not return\nuntil the recording is fully processed. Before returning,\n<code>paintPoints</code> events will be periodically emitted. The union\nof all these events describes all paint points in the recording."
                },
                {
                    "name": "getPaintContents",
                    "description": "Get the graphics at a point where a paint occurred.",
                    "parameters": [
                        {
                            "name": "point",
                            "description": "Execution point to get the graphics for. This must have been listed in\na <code>paintPoints</code> event.",
                            "$ref": "Recording.ExecutionPoint"
                        },
                        {
                            "name": "mimeType",
                            "description": "Encoding format for the returned screen.",
                            "$ref": "MimeType"
                        }
                    ],
                    "returns": [
                        {
                            "name": "screen",
                            "description": "Screen shot of the rendered graphics.",
                            "$ref": "ScreenShot"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "paintPoints",
                    "description": "Describes some points in the recording at which paints occurred. No paint\nwill occur for the recording's beginning execution point.",
                    "parameters": [
                        {
                            "name": "paints",
                            "type": "array",
                            "items": {
                                "$ref": "PaintPoint"
                            }
                        }
                    ]
                }
            ],
            "types": [
                {
                    "id": "MimeType",
                    "description": "Graphics encoding format.",
                    "type": "string",
                    "enum": [
                        "image/jpeg",
                        "image/png"
                    ]
                },
                {
                    "id": "ScreenShotHash",
                    "description": "Compact hash code for a screen shot.",
                    "type": "string"
                },
                {
                    "id": "ScreenShotDescription",
                    "description": "Compact description of the graphics rendered at some point.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "mimeType",
                            "description": "Encoding used for the screen shot.",
                            "$ref": "MimeType"
                        },
                        {
                            "name": "hash",
                            "description": "Hash code for the screen shot's graphics data.",
                            "$ref": "ScreenShotHash"
                        }
                    ]
                },
                {
                    "id": "ScreenShot",
                    "description": "Complete contents of the graphics rendered at some point.",
                    "$ref": "ScreenShotDescription",
                    "properties": [
                        {
                            "name": "data",
                            "description": "Raw graphics data encoded in base64.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "PaintPoint",
                    "description": "Information about a point where a paint occurred.",
                    "$ref": "Recording.TimeStampedPoint",
                    "properties": [
                        {
                            "name": "screenShots",
                            "description": "Available screen shots for the graphics rendered at this point.",
                            "type": "array",
                            "items": {
                                "$ref": "ScreenShotDescription"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Debugger",
            "description": "The Debugger domain defines methods for accessing JS scripts and navigating\naround the recording using breakpoints, stepping, and so forth.\n\n<br><br>All commands and events in this domain must include a <code>sessionId</code>.",
            "commands": [
                {
                    "name": "findScripts",
                    "description": "Find all scripts in the recording. Does not return until the recording is\nfully processed. Before returning, <code>scriptParsed</code> events will be\nemitted for every script in the recording."
                },
                {
                    "name": "getScriptSource",
                    "description": "Get the source contents of a script.",
                    "parameters": [
                        {
                            "name": "scriptId",
                            "description": "Script to fetch the source for.",
                            "$ref": "ScriptId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "scriptSource",
                            "description": "Source contents of the script.",
                            "type": "string"
                        },
                        {
                            "name": "contentType",
                            "description": "Content type of the source contents. For scripts originating from inline\n<code>script</code> tags this will be <code>text/html</code>, and the\nsource includes the associated HTML file's entire contents. For other\nscripts this is <code>text/javascript</code>.",
                            "$ref": "ContentType"
                        }
                    ]
                },
                {
                    "name": "getPossibleBreakpoints",
                    "description": "Get a compact representation of the locations where breakpoints can be set\nin a region of a script.",
                    "parameters": [
                        {
                            "name": "scriptId",
                            "description": "Script to return breakpoint locations for.",
                            "$ref": "ScriptId"
                        },
                        {
                            "name": "begin",
                            "description": "If specified, earlier breakpoint locations will be excluded.",
                            "optional": true,
                            "$ref": "ScriptLocation"
                        },
                        {
                            "name": "end",
                            "description": "If specified, later breakpoint locations will be excluded.",
                            "optional": true,
                            "$ref": "ScriptLocation"
                        }
                    ],
                    "returns": [
                        {
                            "name": "lineLocations",
                            "description": "All breakpoint locations in the specified script and range.",
                            "type": "array",
                            "items": {
                                "$ref": "SameLineScriptLocations"
                            }
                        }
                    ]
                },
                {
                    "name": "setBreakpoint",
                    "description": "Set a breakpoint at a location.",
                    "parameters": [
                        {
                            "name": "location",
                            "description": "Location to set the breakpoint at.",
                            "$ref": "Location"
                        },
                        {
                            "name": "condition",
                            "description": "Any condition which must evaluate to a non-falsy value for an execution\npoint to hit the breakpoint.",
                            "optional": true,
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "breakpointId",
                            "description": "ID for the new breakpoint.",
                            "$ref": "BreakpointId"
                        }
                    ]
                },
                {
                    "name": "removeBreakpoint",
                    "description": "Remove a breakpoint.",
                    "parameters": [
                        {
                            "name": "breakpointId",
                            "$ref": "BreakpointId"
                        }
                    ]
                },
                {
                    "name": "findResumeTarget",
                    "description": "Find where to pause when running forward from a point.",
                    "parameters": [
                        {
                            "name": "point",
                            "description": "Point to start the resume from.",
                            "$ref": "Recording.ExecutionPoint"
                        }
                    ],
                    "returns": [
                        {
                            "name": "target",
                            "description": "Point where execution should pause.",
                            "$ref": "PauseDescription"
                        }
                    ]
                },
                {
                    "name": "findRewindTarget",
                    "description": "Find where to pause when rewinding from a point.",
                    "parameters": [
                        {
                            "name": "point",
                            "description": "Point to start rewinding from.",
                            "$ref": "Recording.ExecutionPoint"
                        }
                    ],
                    "returns": [
                        {
                            "name": "target",
                            "description": "Point where execution should pause.",
                            "$ref": "PauseDescription"
                        }
                    ]
                },
                {
                    "name": "findReverseStepOverTarget",
                    "description": "Find where to pause when reverse-stepping from a point.",
                    "parameters": [
                        {
                            "name": "point",
                            "description": "Point to start reverse-stepping from.",
                            "$ref": "Recording.ExecutionPoint"
                        }
                    ],
                    "returns": [
                        {
                            "name": "target",
                            "description": "Point where execution should pause.",
                            "$ref": "PauseDescription"
                        }
                    ]
                },
                {
                    "name": "findStepOverTarget",
                    "description": "Find where to pause when stepping from a point.",
                    "parameters": [
                        {
                            "name": "point",
                            "description": "Point to start stepping from.",
                            "$ref": "Recording.ExecutionPoint"
                        }
                    ],
                    "returns": [
                        {
                            "name": "target",
                            "description": "Point where execution should pause.",
                            "$ref": "PauseDescription"
                        }
                    ]
                },
                {
                    "name": "findStepInTarget",
                    "description": "Find where to pause when stepping from a point and stopping at the entry of\nany encountered call.",
                    "parameters": [
                        {
                            "name": "point",
                            "description": "Point to start stepping from.",
                            "$ref": "Recording.ExecutionPoint"
                        }
                    ],
                    "returns": [
                        {
                            "name": "target",
                            "description": "Point where execution should pause.",
                            "$ref": "PauseDescription"
                        }
                    ]
                },
                {
                    "name": "findStepOutTarget",
                    "description": "Find where to pause when stepping out from a frame to the caller.",
                    "parameters": [
                        {
                            "name": "point",
                            "description": "Point to step out from.",
                            "$ref": "Recording.ExecutionPoint"
                        }
                    ],
                    "returns": [
                        {
                            "name": "target",
                            "description": "Point where execution should pause.",
                            "$ref": "PauseDescription"
                        }
                    ]
                },
                {
                    "name": "blackboxScript",
                    "description": "Blackbox a script or a region in it. Resume commands like\n<code>findResumeTarget</code> will not return execution points in\nblackboxed regions of a script.",
                    "parameters": [
                        {
                            "name": "scriptId",
                            "description": "Script to blackbox.",
                            "$ref": "ScriptId"
                        },
                        {
                            "name": "begin",
                            "description": "If specified, earlier locations will keep their blackbox state.",
                            "optional": true,
                            "$ref": "ScriptLocation"
                        },
                        {
                            "name": "end",
                            "description": "If specified, later locations will keep their blackbox state.",
                            "optional": true,
                            "$ref": "ScriptLocation"
                        }
                    ]
                },
                {
                    "name": "unblackboxScript",
                    "description": "Unblackbox a script or a region in it.",
                    "parameters": [
                        {
                            "name": "scriptId",
                            "description": "Script to unblackbox.",
                            "$ref": "ScriptId"
                        },
                        {
                            "name": "begin",
                            "description": "If specified, earlier locations will keep their blackbox state.",
                            "optional": true,
                            "$ref": "ScriptLocation"
                        },
                        {
                            "name": "end",
                            "description": "If specified, later locations will keep their blackbox state.",
                            "optional": true,
                            "$ref": "ScriptLocation"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "scriptParsed",
                    "description": "Describes a script that was successfully parsed.",
                    "parameters": [
                        {
                            "name": "scriptId",
                            "description": "ID for the script.",
                            "$ref": "ScriptId"
                        },
                        {
                            "name": "url",
                            "description": "URL of the script. Omitted for dynamically generated scripts (from eval etc.).",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "sourceMapURL",
                            "description": "Any source map URL for the script.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                }
            ],
            "types": [
                {
                    "id": "ScriptId",
                    "description": "Unique ID for a script.",
                    "type": "string"
                },
                {
                    "id": "ContentType",
                    "description": "Possible content types for script sources.",
                    "type": "string",
                    "enum": [
                        "text/javascript",
                        "text/html"
                    ]
                },
                {
                    "id": "ScriptLocation",
                    "description": "Location within a particular script.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "line",
                            "description": "1-indexed line in the script's source.",
                            "type": "integer"
                        },
                        {
                            "name": "column",
                            "description": "0-indexed column in the script's source.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "id": "SameLineScriptLocations",
                    "description": "Set of locations which are all on the same line of the same script.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "line",
                            "description": "Common line number for the locations.",
                            "type": "integer"
                        },
                        {
                            "name": "columns",
                            "description": "Different column numbers for the locations.",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    ]
                },
                {
                    "id": "Location",
                    "description": "Location within a script.",
                    "$ref": "ScriptLocation",
                    "properties": [
                        {
                            "name": "scriptId",
                            "$ref": "ScriptId"
                        }
                    ]
                },
                {
                    "id": "BreakpointId",
                    "description": "ID for a breakpoint.",
                    "type": "string"
                },
                {
                    "id": "PauseReason",
                    "description": "Reasons why execution can pause when running forward or backward through\nthe recording.\n<br>\n<br><code>endpoint</code>: Ran to the beginning or end of the recording.\n<br><code>breakpoint</code>: Hit an installed breakpoint.\n<br><code>debuggerStatement</code>: Hit a debugger statement.\n<br><code>step</code>: Reached the target of a step operation.\n<br><br>",
                    "type": "string",
                    "enum": [
                        "endpoint",
                        "breakpoint",
                        "debuggerStatement",
                        "step"
                    ]
                },
                {
                    "id": "PointDescription",
                    "description": "Description of an execution point.",
                    "$ref": "Recording.TimeStampedPoint",
                    "properties": [
                        {
                            "name": "frame",
                            "description": "Location of the topmost frame, omitted if there are no frames on stack.",
                            "optional": true,
                            "$ref": "Location"
                        }
                    ]
                },
                {
                    "id": "PauseDescription",
                    "description": "Description of a point where execution can pause after running forward or\nbackward through the recording.",
                    "$ref": "PointDescription",
                    "properties": [
                        {
                            "name": "reason",
                            "description": "Reason for pausing.",
                            "$ref": "PauseReason"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Console",
            "description": "The Console domain defines methods for accessing messages reported to the console.\n\n<br><br>All commands and events in this domain must include a <code>sessionId</code>.",
            "commands": [
                {
                    "name": "findMessages",
                    "description": "Find all messages in the recording. Does not return until the recording is\nfully processed. Before returning, <code>newMessage</code> events will be\nemitted for every console message in the recording."
                }
            ],
            "events": [
                {
                    "name": "newMessage",
                    "description": "Describes a console message in the recording.",
                    "parameters": [
                        {
                            "name": "message",
                            "description": "Contents of the message.",
                            "$ref": "Message"
                        }
                    ]
                }
            ],
            "types": [
                {
                    "id": "Message",
                    "description": "Contents of a console message.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "source",
                            "description": "Source of the message.",
                            "$ref": "MessageSource"
                        },
                        {
                            "name": "level",
                            "description": "Severity level of the message.",
                            "$ref": "MessageLevel"
                        },
                        {
                            "name": "text",
                            "description": "Any text associated with the message.",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "description": "Any URL associated with the message.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "line",
                            "description": "Any 1-indexed line number associated with the message.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "column",
                            "description": "Any 0-indexed column number associated with the message.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "point",
                            "description": "Point associated with the message. For messages added due to uncaught\nexceptions this is the point at which the exception was thrown. For\nother types of messages it is the point where the message was added.",
                            "$ref": "Recording.TimeStampedPoint"
                        },
                        {
                            "name": "pauseId",
                            "description": "Pause ID associated with the message arguments and stack.",
                            "$ref": "Pause.PauseId"
                        },
                        {
                            "name": "argumentValues",
                            "description": "Any arguments to the message.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Pause.Value"
                            }
                        },
                        {
                            "name": "stack",
                            "description": "Stack contents, omitted if there are no frames on the stack\nat the message's point.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Pause.FrameId"
                            }
                        },
                        {
                            "name": "data",
                            "description": "Data describing the message arguments and frames on the stack.",
                            "$ref": "Pause.PauseData"
                        }
                    ]
                },
                {
                    "id": "MessageSource",
                    "description": "Possible sources from which a message can originate.",
                    "type": "string",
                    "enum": [
                        "PageError",
                        "ConsoleAPI"
                    ]
                },
                {
                    "id": "MessageLevel",
                    "description": "Severity level of a message.",
                    "type": "string",
                    "enum": [
                        "info",
                        "warning",
                        "error"
                    ]
                }
            ]
        },
        {
            "domain": "Pause",
            "description": "The Pause domain is used to inspect the state of the program when it is paused\nat particular execution points.\n\n<br><br>All commands and events in this domain must include both a <code>sessionId</code>\nand a <code>pauseId</code>.",
            "types": [
                {
                    "id": "PauseId",
                    "description": "Unique identifier for a pause session where the program state can be inspected.\nPauses are each associated with a specific execution point, and when created\nreflect the program state when it reached that point. Operations on a pause\ncan have side effects due to evaluations and so forth. These side effects will\naffect later results produced for the same pause, but will have no effect on\nthe state of the program in other pauses.",
                    "type": "string"
                },
                {
                    "id": "FrameId",
                    "description": "Identifier for a call frame in a pause.",
                    "type": "string"
                },
                {
                    "id": "ScopeId",
                    "description": "Identifier for a scope in a pause.",
                    "type": "string"
                },
                {
                    "id": "ObjectId",
                    "description": "Identifier for a JS object in a pause.",
                    "type": "string"
                },
                {
                    "id": "Value",
                    "description": "Description of a value. At most one property will be specified.\nIf no properties are specified, the value is <code>undefined</code>.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "value",
                            "description": "For non-object values that are valid JSON values.",
                            "optional": true,
                            "type": "any"
                        },
                        {
                            "name": "object",
                            "description": "For object values.",
                            "optional": true,
                            "$ref": "ObjectId"
                        },
                        {
                            "name": "unserializableNumber",
                            "description": "String representation of a number that is not a valid JSON value:\n<code>-0</code>, <code>Infinity</code>, <code>-Infinity</code>,\nand <code>NaN</code>.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "bigint",
                            "description": "String representation of a bigint.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "uninitialized",
                            "description": "Set for values of variables which haven't been initialized yet.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "unavailable",
                            "description": "Set for values which are not available for some reason.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "NamedValue",
                    "description": "Description of a value, with an associated name.",
                    "$ref": "Value",
                    "properties": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "Frame",
                    "description": "Description of a stack frame.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "frameId",
                            "description": "ID of this frame.",
                            "$ref": "FrameId"
                        },
                        {
                            "name": "type",
                            "description": "Type of frame which is executing.",
                            "$ref": "FrameType"
                        },
                        {
                            "name": "functionName",
                            "description": "For call frames, the name of the function being called.\nOmitted if the function has no name.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "functionLocation",
                            "description": "For call frames, the location of the function being called.",
                            "optional": true,
                            "$ref": "Debugger.Location"
                        },
                        {
                            "name": "location",
                            "description": "Location in the source where this frame is paused at.",
                            "$ref": "Debugger.Location"
                        },
                        {
                            "name": "scopeChain",
                            "description": "Scope chain for the call frame, from innermost to outermost.",
                            "type": "array",
                            "items": {
                                "$ref": "ScopeId"
                            }
                        },
                        {
                            "name": "this",
                            "description": "<code>this</code> value of the call frame.",
                            "$ref": "Value"
                        }
                    ]
                },
                {
                    "id": "FrameType",
                    "description": "Different kinds of stack frames.",
                    "type": "string",
                    "enum": [
                        "call",
                        "global",
                        "module",
                        "eval"
                    ]
                },
                {
                    "id": "Scope",
                    "description": "Description of a scope.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "scopeId",
                            "description": "ID of this scope.",
                            "$ref": "ScopeId"
                        },
                        {
                            "name": "type",
                            "description": "Type of this scope.",
                            "$ref": "ScopeType"
                        },
                        {
                            "name": "functionLexical",
                            "description": "Set for the top-level lexical scope of a function.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "object",
                            "description": "For <code>global</code> and <code>with</code> scopes, the underlying object.",
                            "optional": true,
                            "$ref": "ObjectId"
                        },
                        {
                            "name": "bindings",
                            "description": "For <code>function</code> and <code>block</code> scopes, the scope bindings.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "NamedValue"
                            }
                        }
                    ]
                },
                {
                    "id": "ScopeType",
                    "description": "Possible types of a scope.",
                    "type": "string",
                    "enum": [
                        "global",
                        "with",
                        "function",
                        "block"
                    ]
                },
                {
                    "id": "Object",
                    "description": "Description of an object.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "objectId",
                            "description": "ID of this object.",
                            "$ref": "ObjectId"
                        },
                        {
                            "name": "className",
                            "description": "Object class name.",
                            "type": "string"
                        },
                        {
                            "name": "preview",
                            "description": "Any preview data available for the object's contents.",
                            "optional": true,
                            "$ref": "ObjectPreview"
                        }
                    ]
                },
                {
                    "id": "ObjectPreview",
                    "description": "Description of some or all of an object's contents.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "overflow",
                            "description": "Whether there are additional contents not in this preview.",
                            "type": "boolean"
                        },
                        {
                            "name": "prototypeId",
                            "description": "ID of the prototype, if there is one.",
                            "optional": true,
                            "$ref": "ObjectId"
                        },
                        {
                            "name": "properties",
                            "description": "Descriptors of the object's own properties.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Property"
                            }
                        },
                        {
                            "name": "containerEntries",
                            "description": "Entries of container objects.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "ContainerEntry"
                            }
                        },
                        {
                            "name": "getterValues",
                            "description": "Results of evaluating getter properties from this or the prototype chain\non this object, if they could be evaluated without side effects.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "NamedValue"
                            }
                        },
                        {
                            "name": "containerEntryCount",
                            "description": "For container objects, the number of entries in the container.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "regexpString",
                            "description": "For RegExp objects, the string representation.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "dateTime",
                            "description": "For Date objects, the result of calling <code>getTime()</code>.",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "functionName",
                            "description": "For Function objects, the name of the function.\nOmitted for functions with no name.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "functionParameterNames",
                            "description": "For Function objects, the names of the parameters.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "functionLocation",
                            "description": "For scripted Function objects, the location of the function.",
                            "optional": true,
                            "$ref": "Debugger.Location"
                        },
                        {
                            "name": "node",
                            "description": "For DOM Node objects, information about the node.",
                            "optional": true,
                            "$ref": "DOM.Node"
                        },
                        {
                            "name": "rule",
                            "description": "For CSSRule objects, information about the rule.",
                            "optional": true,
                            "$ref": "CSS.Rule"
                        },
                        {
                            "name": "style",
                            "description": "For CSSStyleDeclaration objects, information about the style.",
                            "optional": true,
                            "$ref": "CSS.StyleDeclaration"
                        },
                        {
                            "name": "styleSheet",
                            "description": "For StyleSheet objects, information about the style sheet.",
                            "optional": true,
                            "$ref": "CSS.StyleSheet"
                        }
                    ]
                },
                {
                    "id": "Property",
                    "description": "Description of an object's own property. The <code>NamedValue</code> members\nindicate the property's name and its value if it is a data descriptor.",
                    "$ref": "NamedValue",
                    "properties": [
                        {
                            "name": "flags",
                            "description": "Configuration flags for the property, omitted if the property is\nwritable, configurable, and enumerable (a bitmask of <code>7</code>).",
                            "optional": true,
                            "$ref": "PropertyConfigurationFlags"
                        },
                        {
                            "name": "get",
                            "description": "Any getter function if this is an accessor property.",
                            "optional": true,
                            "$ref": "ObjectId"
                        },
                        {
                            "name": "set",
                            "description": "Any setter function if this is an accessor property.",
                            "optional": true,
                            "$ref": "ObjectId"
                        }
                    ]
                },
                {
                    "id": "PropertyConfigurationFlags",
                    "description": "Compact bitmask of configuration flags on a property. Possible values in the mask\nare <code>1</code> (whether the property is writable), <code>2</code>\n(whether the property is configurable), <code>4</code> (whether the\nproperty is enumerable), and combinations of these values using bitwise-or.",
                    "type": "integer"
                },
                {
                    "id": "ContainerEntry",
                    "description": "An entry in a container object (maps, sets, weak maps, and weak sets).",
                    "type": "object",
                    "properties": [
                        {
                            "name": "key",
                            "description": "For maps and weak maps, this entry's key.",
                            "optional": true,
                            "$ref": "Value"
                        },
                        {
                            "name": "value",
                            "description": "This entry's value.",
                            "$ref": "Value"
                        }
                    ]
                },
                {
                    "id": "PauseData",
                    "description": "Block of data from this pause which might be useful to the protocol client.\nTo reduce the number of back-and-forth calls required over the protocol,\ndata which wasn't specifically asked for can be returned by commands or\nevents. <code>PauseData</code> objects will not duplicate data from a\n<code>PauseData</code> object produced earlier for the same pause.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "frames",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Frame"
                            }
                        },
                        {
                            "name": "scopes",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Scope"
                            }
                        },
                        {
                            "name": "objects",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Object"
                            }
                        }
                    ]
                },
                {
                    "id": "Result",
                    "description": "Result of performing an effectful operation.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "returned",
                            "description": "If the operation returned normally, the returned value.",
                            "optional": true,
                            "$ref": "Value"
                        },
                        {
                            "name": "exception",
                            "description": "If the operation threw an exception, the thrown value.",
                            "optional": true,
                            "$ref": "Value"
                        },
                        {
                            "name": "failed",
                            "description": "Set if the operation failed and no value was returned or thrown.\nThis can happen when operations interact with the system in an\nunsupported way (such as by calling <code>dump()</code>)\nor if the evaluation took too long and was forcibly terminated.",
                            "optional": true,
                            "type": "boolean"
                        },
                        {
                            "name": "data",
                            "description": "Any additional data associated with the returned/thrown value.",
                            "$ref": "PauseData"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "evaluateInFrame",
                    "description": "Evaluate an expression in the context of a call frame.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "description": "Frame to perform the evaluation in.",
                            "$ref": "FrameId"
                        },
                        {
                            "name": "expression",
                            "description": "Expression to evaluate.",
                            "type": "string"
                        },
                        {
                            "name": "bindings",
                            "description": "Any extra bindings to add to the evaluation's scope.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "NamedValue"
                            }
                        }
                    ],
                    "returns": [
                        {
                            "name": "result",
                            "description": "Result of the evaluation.",
                            "$ref": "Result"
                        }
                    ]
                },
                {
                    "name": "evaluateInGlobal",
                    "description": "Evaluate an expression in a global context.",
                    "parameters": [
                        {
                            "name": "expression",
                            "description": "Expression to evaluate.",
                            "type": "string"
                        },
                        {
                            "name": "bindings",
                            "description": "Any extra bindings to add to the evaluation's scope.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "NamedValue"
                            }
                        }
                    ],
                    "returns": [
                        {
                            "name": "result",
                            "description": "Result of the evaluation.",
                            "$ref": "Result"
                        }
                    ]
                },
                {
                    "name": "getObjectProperty",
                    "description": "Read a property from an object.",
                    "parameters": [
                        {
                            "name": "object",
                            "description": "Object to get the property from.",
                            "$ref": "ObjectId"
                        },
                        {
                            "name": "name",
                            "description": "Property to get.",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "result",
                            "description": "Result of getting the property.",
                            "$ref": "Result"
                        }
                    ]
                },
                {
                    "name": "getObjectPreview",
                    "description": "Load a complete preview for an object.",
                    "parameters": [
                        {
                            "name": "object",
                            "description": "Object to load the preview for.",
                            "$ref": "ObjectId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "data",
                            "description": "Returned data. This includes a preview for the object which does not\nhave <code>overflow</code> set, and additional data for objects which\nit references.",
                            "$ref": "PauseData"
                        }
                    ]
                },
                {
                    "name": "getScope",
                    "description": "Load a scope's contents.",
                    "parameters": [
                        {
                            "name": "scope",
                            "description": "Scope to load.",
                            "$ref": "ScopeId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "data",
                            "description": "Returned data. This includes the scope's contents, and additional data\nfor objects which it references.",
                            "$ref": "PauseData"
                        }
                    ]
                },
                {
                    "name": "getTopFrame",
                    "description": "Get the topmost frame on the stack.",
                    "returns": [
                        {
                            "name": "frame",
                            "$ref": "Frame"
                        }
                    ]
                },
                {
                    "name": "getAllFrames",
                    "description": "Get all frames on the stack.",
                    "returns": [
                        {
                            "name": "frames",
                            "type": "array",
                            "items": {
                                "$ref": "Frame"
                            }
                        }
                    ]
                },
                {
                    "name": "getFrameArguments",
                    "description": "Get the values of a frame's arguments.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "description": "Frame to get the parameters for.",
                            "$ref": "FrameId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "argumentValues",
                            "description": "Current values of each of the frame's arguments. Omitted for non-call frames.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Value"
                            }
                        }
                    ]
                },
                {
                    "name": "getFrameSteps",
                    "description": "Get the points of all steps that are executed by a frame.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "description": "Frame to get steps for.",
                            "$ref": "FrameId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "steps",
                            "description": "Execution points for all steps which the frame executes. In the case of\nasync/generator frames, only steps that are executed while the current\nframe is on the stack are included: steps in the same logical frame that\nthat are separated from the current point by an <code>await</code> or\n<code>yield</code> are excluded.",
                            "type": "array",
                            "items": {
                                "$ref": "Debugger.PointDescription"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "domain": "DOM",
            "description": "The DOM domain is used to inspect the DOM at particular execution points.\nInspecting the DOM requires a <code>Pause.PauseId</code>, and DOM nodes\nare identified by a <code>Pause.ObjectId</code>.\n\n<br><br>All commands and events in this domain must include both a <code>sessionId</code>\nand a <code>pauseId</code>.",
            "commands": [
                {
                    "name": "getDocument",
                    "description": "Get the page's root document.",
                    "returns": [
                        {
                            "name": "document",
                            "description": "ID for the document.",
                            "$ref": "Pause.ObjectId"
                        },
                        {
                            "name": "data",
                            "description": "Information about the document and related nodes.",
                            "$ref": "Pause.PauseData"
                        }
                    ]
                },
                {
                    "name": "querySelector",
                    "description": "Call querySelector() on a node in the page.",
                    "parameters": [
                        {
                            "name": "node",
                            "description": "Base node for the query.",
                            "$ref": "Pause.ObjectId"
                        },
                        {
                            "name": "selector",
                            "description": "Selector to query.",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "result",
                            "description": "ID of the found node, omitted if none was found.",
                            "optional": true,
                            "$ref": "Pause.ObjectId"
                        },
                        {
                            "name": "data",
                            "description": "Information about the returned node and related nodes.",
                            "$ref": "Pause.PauseData"
                        }
                    ]
                },
                {
                    "name": "getEventListeners",
                    "description": "Get the event listeners attached to a node in the page.",
                    "parameters": [
                        {
                            "name": "node",
                            "description": "Node to get listeners for.",
                            "$ref": "Pause.ObjectId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "listeners",
                            "description": "All event listeners for the node.",
                            "type": "array",
                            "items": {
                                "$ref": "EventListener"
                            }
                        },
                        {
                            "name": "data",
                            "description": "Additional information about the event listeners.",
                            "$ref": "Pause.PauseData"
                        }
                    ]
                },
                {
                    "name": "getBoxModel",
                    "description": "Get boxes for a node.",
                    "parameters": [
                        {
                            "name": "node",
                            "description": "Node to get boxes for.",
                            "$ref": "Pause.ObjectId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "model",
                            "description": "Box model data for the node.",
                            "$ref": "BoxModel"
                        }
                    ]
                },
                {
                    "name": "getBoundingClientRect",
                    "description": "Get the bounding client rect for a node.",
                    "parameters": [
                        {
                            "name": "node",
                            "description": "Node to get the bounds for.",
                            "$ref": "Pause.ObjectId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "rect",
                            "description": "Bounding client rect for the node.",
                            "$ref": "Rect"
                        }
                    ]
                }
            ],
            "types": [
                {
                    "id": "EventListener",
                    "description": "Description of an event listener on a page.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "node",
                            "description": "Node the listener is attached to.",
                            "$ref": "Pause.ObjectId"
                        },
                        {
                            "name": "handler",
                            "description": "Handler function associated with the listener.",
                            "$ref": "Pause.ObjectId"
                        },
                        {
                            "name": "type",
                            "description": "Event being listened for.",
                            "type": "string"
                        },
                        {
                            "name": "capture",
                            "description": "Whether the listener captures events.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "Node",
                    "description": "Description of a node's contents which is attached to its\nassociated <code>Pause.ObjectPreview.node</code>.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "nodeType",
                            "description": "Value of <code>node.nodeType</code>.",
                            "type": "integer"
                        },
                        {
                            "name": "nodeName",
                            "description": "Value of <code>node.nodeName</code>.",
                            "type": "string"
                        },
                        {
                            "name": "nodeValue",
                            "description": "Value of <code>node.nodeValue</code>.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "isConnected",
                            "description": "Value of <code>node.isConnected</code>.",
                            "type": "boolean"
                        },
                        {
                            "name": "attributes",
                            "description": "For element nodes, the attributes.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Attr"
                            }
                        },
                        {
                            "name": "pseudoType",
                            "description": "For pseudo elements, the pseudo type.",
                            "optional": true,
                            "$ref": "PseudoType"
                        },
                        {
                            "name": "style",
                            "description": "For element nodes, ID of any inline style declaration.",
                            "optional": true,
                            "$ref": "Pause.ObjectId"
                        },
                        {
                            "name": "parentNode",
                            "description": "ID of any <code>node.parentNode</code>.",
                            "optional": true,
                            "$ref": "Pause.ObjectId"
                        },
                        {
                            "name": "childNodes",
                            "description": "IDs of all <code>node.childNodes</code>.",
                            "optional": true,
                            "type": "array",
                            "items": {
                                "$ref": "Pause.ObjectId"
                            }
                        }
                    ]
                },
                {
                    "id": "Attr",
                    "description": "Description of an element attribute.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "Value of <code>attr.name</code>.",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "description": "Value of <code>attr.value</code>.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "PseudoType",
                    "description": "Type of a pseudo element.",
                    "type": "string",
                    "enum": [
                        "before",
                        "after",
                        "marker"
                    ]
                },
                {
                    "id": "BoxModel",
                    "description": "Description of the box model for a node.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "node",
                            "description": "Node this is the box model for.",
                            "$ref": "Pause.ObjectId"
                        },
                        {
                            "name": "content",
                            "description": "Quads holding the node's content.",
                            "$ref": "Quads"
                        },
                        {
                            "name": "padding",
                            "description": "Quads including the content and any padding between the border.",
                            "$ref": "Quads"
                        },
                        {
                            "name": "border",
                            "description": "Quads including the border.",
                            "$ref": "Quads"
                        },
                        {
                            "name": "margin",
                            "description": "Quads including the border and any margin between other nodes.",
                            "$ref": "Quads"
                        }
                    ]
                },
                {
                    "id": "Quads",
                    "description": "Compact representation of an array of DOMQuads, projected onto the <code>x/y</code>\nplane (i.e. <code>z</code> and <code>w</code> values in points are ignored).\nEach quad is 8 elements, with the <code>x</code> and <code>y</code> coordinates\nof the four points in the quad. The entire array will have a length that is a\nmultiple of 8.",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                {
                    "id": "Rect",
                    "description": "Compact representation of a DOMRect. A rect has four elements, listing the\nrect's <code>left</code>, <code>top</code>, <code>right</code>, and\n<code>bottom</code> values in order.",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            ]
        },
        {
            "domain": "CSS",
            "description": "The CSS domain is used to inspect the CSS state at particular execution points.\n\n<br><br>All commands and events in this domain must include both a <code>sessionId</code>\nand a <code>pauseId</code>.",
            "commands": [
                {
                    "name": "getComputedStyle",
                    "description": "Get the styles computed for a node.",
                    "parameters": [
                        {
                            "name": "node",
                            "$ref": "Pause.ObjectId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "computedStyle",
                            "type": "array",
                            "items": {
                                "$ref": "ComputedStyleProperty"
                            }
                        }
                    ]
                },
                {
                    "name": "getAppliedRules",
                    "description": "Get the style rules being applied to a node.",
                    "parameters": [
                        {
                            "name": "node",
                            "$ref": "Pause.ObjectId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "rules",
                            "description": "IDs of all style rules being applied to the node.",
                            "type": "array",
                            "items": {
                                "$ref": "Pause.ObjectId"
                            }
                        },
                        {
                            "name": "data",
                            "description": "Information about the rules and related objects.",
                            "$ref": "Pause.PauseData"
                        }
                    ]
                }
            ],
            "types": [
                {
                    "id": "ComputedStyleProperty",
                    "description": "A style which is applied to a node.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "name",
                            "description": "Name of the style.",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "description": "Value of the style.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "id": "Rule",
                    "description": "Description of a CSSRule's contents which is attached to its\nassociated <code>Pause.ObjectPreview.rule</code>.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "type",
                            "description": "Value of <code>rule.type</code>.",
                            "type": "integer"
                        },
                        {
                            "name": "cssText",
                            "description": "Value of <code>rule.cssText</code>.",
                            "type": "string"
                        },
                        {
                            "name": "parentStyleSheet",
                            "description": "The ID of any style sheet this rule is associated with.",
                            "optional": true,
                            "$ref": "Pause.ObjectId"
                        },
                        {
                            "name": "startLine",
                            "description": "Start line in the parent style sheet (1-indexed).",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "startColumn",
                            "description": "Start column in the parent style sheet (0-indexed).",
                            "optional": true,
                            "type": "integer"
                        },
                        {
                            "name": "selectorText",
                            "description": "For <code>CSSStyleRule</code> objects, the value of <code>rule.selectorText</code>.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "style",
                            "description": "For <code>CSSStyleRule</code> objects, the ID of the rule's style declaration.",
                            "optional": true,
                            "$ref": "Pause.ObjectId"
                        }
                    ]
                },
                {
                    "id": "StyleDeclaration",
                    "description": "Description of a CSSStyleDeclaration's contents which is attached to its\nassociated <code>Pause.ObjectPreview.style</code>.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "cssText",
                            "description": "Value of <code>style.cssText</code>.",
                            "type": "string"
                        },
                        {
                            "name": "parentRule",
                            "description": "If this declaration originates from a CSSStyleRule, ID of that rule.",
                            "optional": true,
                            "$ref": "Pause.ObjectId"
                        },
                        {
                            "name": "properties",
                            "description": "Style properties of this declaration.",
                            "type": "array",
                            "items": {
                                "$ref": "StyleProperty"
                            }
                        }
                    ]
                },
                {
                    "id": "StyleProperty",
                    "description": "Information about a style property declaration.",
                    "$ref": "ComputedStyleProperty",
                    "properties": [
                        {
                            "name": "important",
                            "description": "Whether the property is marked <code>!important</code>. Defaults to\n<code>false</code> if omitted.",
                            "optional": true,
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "id": "StyleSheet",
                    "description": "Description of a StyleSheet's contents which is attached to its\nassociated <code>Pause.ObjectPreview.styleSheet</code>.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "href",
                            "description": "URL of the style sheet.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Analysis",
            "description": "The Analysis domain is used to efficiently analyze the program state at many\nexecution points. Analysis specifications are based on the MapReduce\nalgorithm: a map operation is performed on all the execution points of\ninterest, and the results are reduced to a summary afterwards.\n\n<br><br>The life cycle of an analysis is as follows. First, use <code>createAnalysis</code>\nto create the analysis and specify its map and reduce operations. Next, use one\nor more other commands to specify the set of execution points to apply the\nanalysis to. Finally, use <code>runAnalysis</code> to start running the\nanalysis and generate <code>analysisResult</code> events.\n\n<br><br>Currently, analyses can only be applied to one session/recording.\nThis restriction will be relaxed in the future.",
            "types": [
                {
                    "id": "AnalysisId",
                    "description": "Unique identifier for an analysis.",
                    "type": "string"
                },
                {
                    "id": "MapInput",
                    "description": "Input to the mapper function.",
                    "$ref": "Recording.TimeStampedPoint",
                    "properties": [
                        {
                            "name": "sessionId",
                            "description": "Associated session ID for the current execution point.",
                            "$ref": "Session.SessionId"
                        },
                        {
                            "name": "pauseId",
                            "description": "Pause ID created for the current execution point.",
                            "$ref": "Pause.PauseId"
                        }
                    ]
                },
                {
                    "id": "AnalysisKey",
                    "description": "Key for an analysis result. This can be any JSON value. Keys are equivalent\nif they are structurally equivalent: they have the same contents, though\nobject keys may be ordered differently when stringified.",
                    "type": "any"
                },
                {
                    "id": "AnalysisValue",
                    "description": "Value for an analysis result. This can be any JSON value.",
                    "type": "any"
                },
                {
                    "id": "AnalysisEntry",
                    "description": "A key/value pair produced by an analysis.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "key",
                            "$ref": "AnalysisKey"
                        },
                        {
                            "name": "value",
                            "$ref": "AnalysisValue"
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "createAnalysis",
                    "description": "Start specifying a new analysis.",
                    "parameters": [
                        {
                            "name": "mapper",
                            "description": "Body of the mapper function. The mapper function takes two arguments:\n<code>input</code> is a <code>MapInput</code> object, and\n<code>sendCommand</code> is a function that can be passed a command\nname and parameters (in that order) and synchronously returns the\ncommand result. Only methods from the <code>Pause</code> domain may\nbe used with <code>sendCommand</code>. The mapper function must\nreturn an array of <code>AnalysisEntry</code> objects.",
                            "type": "string"
                        },
                        {
                            "name": "reducer",
                            "description": "Body of the reducer function. The reducer function takes two arguments:\n<code>key</code> is an <code>AnalysisKey</code>, and <code>values</code>\nis an array of <code>AnalysisValue</code>. All the values\nwere associated with the key by an earlier call to <code>mapper</code>\n<strong>or</strong> <code>reducer</code>. The reducer function must\nreturn an <code>AnalysisValue</code>, which summarizes all\nthe input values and will be associated with <code>key</code> for\n<code>analysisResult</code> events or further calls to the reducer.\nThe reducer may be omitted if no reduction phase is needed.",
                            "optional": true,
                            "type": "string"
                        },
                        {
                            "name": "effectful",
                            "description": "Whether effectful commands in the <code>Pause</code> domain might be\nsent by the mapper function. An analysis which does not use effectful\ncommands will run more efficiently. Effectful commands are\n<code>Pause.evaluateInFrame</code>, and <code>Pause.getObjectProperty</code>.",
                            "type": "boolean"
                        }
                    ],
                    "returns": [
                        {
                            "name": "analysisId",
                            "description": "ID of the resulting analysis.",
                            "$ref": "AnalysisId"
                        }
                    ]
                },
                {
                    "name": "addLocation",
                    "description": "Apply the analysis to every point where a script location executes.",
                    "parameters": [
                        {
                            "name": "analysisId",
                            "description": "Associated analysis.",
                            "$ref": "AnalysisId"
                        },
                        {
                            "name": "sessionId",
                            "description": "Session containing the script.",
                            "$ref": "Session.SessionId"
                        },
                        {
                            "name": "location",
                            "description": "Location to apply the analysis to.",
                            "$ref": "Debugger.Location"
                        }
                    ]
                },
                {
                    "name": "addFunctionEntryPoints",
                    "description": "Apply the analysis to every function entry point in a region of a script.",
                    "parameters": [
                        {
                            "name": "analysisId",
                            "description": "Associated analysis.",
                            "$ref": "AnalysisId"
                        },
                        {
                            "name": "sessionId",
                            "description": "Associated session.",
                            "$ref": "Session.SessionId"
                        },
                        {
                            "name": "scriptId",
                            "description": "Script to look for function entry points in.",
                            "$ref": "Debugger.ScriptId"
                        },
                        {
                            "name": "begin",
                            "description": "If specified, earlier functions will be excluded.",
                            "optional": true,
                            "$ref": "Debugger.ScriptLocation"
                        },
                        {
                            "name": "end",
                            "description": "If specified, later functions will be excluded.",
                            "optional": true,
                            "$ref": "Debugger.ScriptLocation"
                        }
                    ]
                },
                {
                    "name": "addEventHandlerEntryPoints",
                    "description": "Apply the analysis to the entry point of every handler for an event.",
                    "parameters": [
                        {
                            "name": "analysisId",
                            "description": "Associated analysis.",
                            "$ref": "AnalysisId"
                        },
                        {
                            "name": "sessionId",
                            "description": "Associated session.",
                            "$ref": "Session.SessionId"
                        },
                        {
                            "name": "eventType",
                            "description": "Type of event whose handler calls the analysis should be applied to.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "runAnalysis",
                    "description": "Run the analysis. After this is called, <code>analysisResult</code> and/or\n<code>analysisError</code> events will be emitted as results are gathered.\nDoes not return until the analysis has finished and all events have been\nemitted.",
                    "parameters": [
                        {
                            "name": "analysisId",
                            "description": "Analysis to run.",
                            "$ref": "AnalysisId"
                        }
                    ]
                },
                {
                    "name": "releaseAnalysis",
                    "description": "Release an analysis and its server side resources. If the analysis is\nrunning, it will be canceled, preventing further <code>analysisResult</code>\nand <code>analysisError</code> events from being emitted.",
                    "parameters": [
                        {
                            "name": "analysisId",
                            "description": "Analysis to release.",
                            "$ref": "AnalysisId"
                        }
                    ]
                },
                {
                    "name": "findAnalysisPoints",
                    "description": "Find the set of execution points at which an analysis will run. After this\nis called, <code>analysisPoints</code> events will be emitted as the points\nare found. Does not return until events for all points have been emitted.\nCan only be used after the analysis has started running.",
                    "parameters": [
                        {
                            "name": "analysisId",
                            "description": "Analysis to find points for.",
                            "$ref": "AnalysisId"
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "analysisResult",
                    "description": "Describes some results of an analysis.",
                    "parameters": [
                        {
                            "name": "analysisId",
                            "description": "Associated analysis.",
                            "$ref": "AnalysisId"
                        },
                        {
                            "name": "results",
                            "description": "Results for different keys. If a reducer was specified, a given key can\nonly appear once in the results emitted for the analysis.",
                            "type": "array",
                            "items": {
                                "$ref": "AnalysisEntry"
                            }
                        }
                    ]
                },
                {
                    "name": "analysisError",
                    "description": "Describes an error that occurred when running an analysis mapper or reducer\nfunction. This will not be emitted for every error, but if there was any\nerror then at least one event will be emitted.",
                    "parameters": [
                        {
                            "name": "analysisId",
                            "description": "Associated analysis.",
                            "$ref": "AnalysisId"
                        },
                        {
                            "name": "error",
                            "description": "Description of the error.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "analysisPoints",
                    "description": "Describes some points at which an analysis will run.",
                    "parameters": [
                        {
                            "name": "analysisId",
                            "description": "Associated analysis.",
                            "$ref": "AnalysisId"
                        },
                        {
                            "name": "points",
                            "description": "Some points at which the analysis will run.",
                            "type": "array",
                            "items": {
                                "$ref": "Debugger.PointDescription"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Internal",
            "description": "The Internal domain is for use by Web Replay's own tools and other software.\nWhile use of this domain is not restricted, it won't be very helpful for other\nusers.",
            "commands": [
                {
                    "name": "log",
                    "description": "Add text to the server side log for this connection.",
                    "parameters": [
                        {
                            "name": "text",
                            "description": "Text to log. This must not contain identifying information about the\nuser or website being visited.",
                            "type": "string"
                        },
                        {
                            "name": "time",
                            "description": "Timestamp from Date.now() to associate with this logged text.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "name": "createRecording",
                    "description": "Create a new recording.",
                    "parameters": [
                        {
                            "name": "buildId",
                            "description": "Build Id of the software which produced the recording.",
                            "$ref": "Recording.BuildId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "recordingId",
                            "description": "Identifier for the recording.",
                            "$ref": "Recording.RecordingId"
                        }
                    ]
                },
                {
                    "name": "addRecordingData",
                    "description": "Add data to a recording. The next message sent after this must be a binary\nmessage with the data described by this message. Uploaded recordings are not\nexplicitly finished; replay sessions created for a recording will include\nall data which was successfully uploaded.",
                    "parameters": [
                        {
                            "name": "recordingId",
                            "description": "ID of the recording data is being added to. This recording must have\nbeen produced by a createRecording command previously sent on this\nconnection.",
                            "$ref": "Recording.RecordingId"
                        },
                        {
                            "name": "offset",
                            "description": "Byte offset into the recording's blob of the data being sent.",
                            "type": "integer"
                        },
                        {
                            "name": "length",
                            "description": "Byte length of the data being sent.",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "name": "addRecordingDescription",
                    "description": "Add metadata about a recording.",
                    "parameters": [
                        {
                            "name": "recordingId",
                            "description": "ID of the recording being described.",
                            "$ref": "Recording.RecordingId"
                        },
                        {
                            "name": "length",
                            "description": "Total byte length of the recording.",
                            "type": "integer"
                        },
                        {
                            "name": "duration",
                            "description": "Duration of the entire recording.",
                            "$ref": "Recording.TimeStamp"
                        },
                        {
                            "name": "lastScreenMimeType",
                            "description": "Mime type for graphics data at the end of the recording.",
                            "optional": true,
                            "$ref": "Graphics.MimeType"
                        },
                        {
                            "name": "lastScreenData",
                            "description": "Raw graphics data for the end of the recording.",
                            "optional": true,
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "hasResource",
                    "description": "Determine whether a resource is known to the cloud service.",
                    "parameters": [
                        {
                            "name": "resource",
                            "description": "Resource to look for.",
                            "$ref": "Resource"
                        }
                    ],
                    "returns": [
                        {
                            "name": "known",
                            "description": "Whether the resource's contents are known.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "addResource",
                    "description": "Upload a resource's contents to the cloud service.",
                    "parameters": [
                        {
                            "name": "resource",
                            "description": "Resource to add.",
                            "$ref": "Resource"
                        },
                        {
                            "name": "contents",
                            "description": "Text contents of the resource.",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "addRecordingResource",
                    "description": "Associate a resource with a recording.",
                    "parameters": [
                        {
                            "name": "recordingId",
                            "description": "ID of the recording.",
                            "$ref": "Recording.RecordingId"
                        },
                        {
                            "name": "resource",
                            "description": "Resource which the recording is associated with.",
                            "$ref": "Resource"
                        }
                    ]
                },
                {
                    "name": "listRecordingResources",
                    "description": "List all resources associated with a recording.",
                    "parameters": [
                        {
                            "name": "recordingId",
                            "description": "ID of the recording.",
                            "$ref": "Recording.RecordingId"
                        }
                    ],
                    "returns": [
                        {
                            "name": "resources",
                            "description": "All resources that have been associated with the recording.",
                            "type": "array",
                            "items": {
                                "$ref": "Resource"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecordingResource",
                    "description": "Download a resource associated with a recording.",
                    "parameters": [
                        {
                            "name": "recordingId",
                            "description": "ID of the recording.",
                            "$ref": "Recording.RecordingId"
                        },
                        {
                            "name": "resource",
                            "description": "Resource to download.",
                            "$ref": "Resource"
                        }
                    ],
                    "returns": [
                        {
                            "name": "contents",
                            "description": "Text contents of the resource.",
                            "type": "string"
                        }
                    ]
                }
            ],
            "types": [
                {
                    "id": "Resource",
                    "description": "Information about a file based resource. Currently, resources are used for\nsource maps and original sources.",
                    "type": "object",
                    "properties": [
                        {
                            "name": "url",
                            "description": "URL of the resource.",
                            "type": "string"
                        },
                        {
                            "name": "checksum",
                            "description": "Checksum of the resource's contents.",
                            "type": "string"
                        }
                    ]
                }
            ]
        }
    ]
}