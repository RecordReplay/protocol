version
  major 0
  minor 1

# The Recording domain defines methods for managing recordings.
domain Recording

  # Globally unique identifier for a recording.
  type RecordingId extends string

  # Unique identifier for the software used to produce a recording.
  type BuildId extends string

  # A point in time within a recording, specified as the elapsed time in
  # milliseconds since the recording started. Sub-millisecond resolution
  # is possible.
  type TimeStamp extends number

  # Description for a range of time within a recording.
  type TimeRange extends object
    properties
      TimeStamp begin
      TimeStamp end

  # Identifier for a point within a recording at which the program state can be
  # inspected. Execution points are integers encoded as base-10 numeric strings,
  # such that smaller numbered points precede larger numbered ones. They can be
  # compared by e.g. converting to BigInts and then comparing those BigInts.
  type ExecutionPoint extends string

  # An execution point and its associated time stamp. Recordings always have a
  # beginning execution point with value "0" and a time stamp of zero.
  type TimeStampedPoint extends object
    properties
      ExecutionPoint point
      TimeStamp time

  # A mouse event that occurs somewhere in a recording.
  type MouseEvent extends TimeStampedPoint
    properties
      # Kind of mouse event.
      MouseEventKind kind
      # X coordinate of the event, relative to the upper left of the page's main window.
      integer clientX
      # Y coordinate of the event, relative to the upper left of the page's main window.
      integer clientY

  # Kinds of mouse events described in a recording.
  type MouseEventKind extends string
    enum
      mousemove
      mousedown

  # Get a description of a recording.
  command getDescription
    parameters
      # Recording to get the description for.
      RecordingId recordingId
    returns
      # Duration of the recording.
      TimeStamp duration
      # Byte length of the recording.
      integer length
      # Painted graphics at the end of the recording.
      optional Graphics.ScreenShot lastScreen

  # Create a session for inspecting a recording. This command does not return
  # until the recording's contents have been fully received. If the contents
  # are incomplete, <code>uploadedData</code> events will be periodically
  # emitted before the command returns.
  command createSession
    parameters
      # Recording to load into the session.
      RecordingId recordingId
    returns
      # Identifier for the new session.
      Session.SessionId sessionId

  # Describes how much of a recording's data has been uploaded to the cloud service.
  event uploadedData
    parameters
      # Recording being described.
      RecordingId recordingId
      # How many bytes of recording data have been received by the cloud service.
      integer byteCount

  # Release a session and allow its resources to be reclaimed.
  command releaseSession
    parameters
      # Session to release.
      Session.SessionId sessionId

  # Begin processing a recording, even if no sessions have been created for it.
  # After calling this, sessions created for the recording (on this connection,
  # or another) may start in a partially or fully processed state and start
  # being used immediately.
  command processRecording
    parameters
      RecordingId recordingId

# The Session domain defines methods for using recording sessions. In order to
# inspect a recording, it must first be loaded into a session via
# <code>Recording.createSession</code>.
#
# After the session is created, it may be in an unprocessed or partially
# processed state. As documented, some commands do not return until the session
# has fully processed the recording. Processing starts automatically after the
# session is created.
#
# <br><br>All commands and events in this domain must include a <code>sessionId</code>.
domain Session

  # Unique identifier for a session which a recording has been loaded into.
  type SessionId extends string

  # Does not return until the recording is fully processed. Before returning,
  # <code>missingRegions</code> and <code>unprocessedRegions</code> events will
  # be periodically emitted.
  command ensureProcessed

  # Event describing regions of the recording that have not been uploaded.
  event missingRegions
    parameters
      # Regions that have not been uploaded.
      array of Recording.TimeRange regions

  # Event describing regions of the recording that have not been processed.
  event unprocessedRegions
    parameters
      # Any missing regions are also unprocessed regions.
      array of Recording.TimeRange regions

  # Find all points in the recording at which a mouse move or click occurred.
  # Does not return until the recording is fully processed. Before returning,
  # <code>mouseEvents</code> events will be periodically emitted. The union
  # of all these events describes all mouse events in the recording.
  command findMouseEvents

  # Describes some mouse events that occur in the recording.
  event mouseEvents
    parameters
      array of Recording.MouseEvent events

  # Get the last execution point in the recording.
  command getEndpoint
    returns
      Recording.TimeStampedPoint endpoint

  # Create a pause describing the state at an execution point.
  command createPause
    parameters
      # Point to create the pause at.
      Recording.ExecutionPoint point
    returns
      # Identifier for the new pause.
      Pause.PauseId pauseId
      # IDs of all frames on the stack. Omitted if there are no
      # frames on the stack at this point.
      optional array of Pause.FrameId stack
      # Data describing the frames on the stack and the in scope
      # variables of the topmost frame.
      Pause.PauseData data

  # Release a pause and allow its resources to be reclaimed.
  command releasePause
    parameters
      Pause.PauseId pauseId

# The Graphics domain defines methods for accessing a recording's graphics data.
#
# <br><br>All commands and events in this domain must include a <code>sessionId</code>.
domain Graphics

  # Find all points in the recording at which paints occurred. Does not return
  # until the recording is fully processed. Before returning,
  # <code>paintPoints</code> events will be periodically emitted. The union
  # of all these events describes all paint points in the recording.
  command findPaints

  # Describes some points in the recording at which paints occurred. No paint
  # will occur for the recording's beginning execution point.
  event paintPoints
    parameters
      array of PaintPoint paints

  # Get the graphics at a point where a paint occurred.
  command getPaintContents
    parameters
      # Execution point to get the graphics for. This must have been listed in
      # a <code>paintPoints</code> event.
      Recording.ExecutionPoint point
      # Encoding format for the returned screen.
      MimeType mimeType
    returns
      # Screen shot of the rendered graphics.
      ScreenShot screen

  # Graphics encoding format.
  type MimeType extends string
    enum
      image/jpeg
      image/png

  # Compact hash code for a screen shot.
  type ScreenShotHash extends string

  # Compact description of the graphics rendered at some point.
  type ScreenShotDescription extends object
    properties
      # Encoding used for the screen shot.
      MimeType mimeType
      # Hash code for the screen shot's graphics data.
      ScreenShotHash hash

  # Complete contents of the graphics rendered at some point.
  type ScreenShot extends ScreenShotDescription
    properties
      # Raw graphics data encoded in base64.
      string data

  # Information about a point where a paint occurred.
  type PaintPoint extends Recording.TimeStampedPoint
    properties
      # Available screen shots for the graphics rendered at this point.
      array of ScreenShotDescription screenShots

  # Get the value of <code>window.devicePixelRatio</code>. This is the ratio of
  # pixels in screen shots to pixels used by DOM/CSS data such as
  # <code>DOM.getBoundingClientRect</code>.
  command getDevicePixelRatio
    returns
      number ratio

# The Debugger domain defines methods for accessing JS scripts and navigating
# around the recording using breakpoints, stepping, and so forth.
#
# <br><br>All commands and events in this domain must include a <code>sessionId</code>.
domain Debugger

  # Find all scripts in the recording. Does not return until the recording is
  # fully processed. Before returning, <code>scriptParsed</code> events will be
  # emitted for every script in the recording.
  command findScripts

  # Describes a script that was successfully parsed.
  event scriptParsed
    parameters
      # ID for the script.
      ScriptId scriptId
      # Kind of script.
      ScriptKind kind
      # URL of the script. Omitted for dynamically generated scripts (from eval etc.).
      optional string url
      # If this is an original script, the IDs of the scripts which were generated from
      # this one.
      optional array of ScriptId generatedScriptIds

  # Unique ID for a script.
  type ScriptId extends string

  # Kind of a script.
  # <br>
  # <br><code>inlineScript</code>: Inline contents of a <code>script</code> element.
  # <br><code>scriptSource</code>: Script loaded via the <code>src</code> attribute
  #   of a <code>script</code> element.
  # <br><code>other</code>: An unspecified kind of script. This does not include any
  #   original scripts.
  # <br><code>html</code>: An entire HTML page containing one or more inline scripts.
  #   This is an original script whose generated scripts are the inline scripts.
  # <br><code>sourceMapped</code>: A source script specified by a source map.
  #   This is an original script whose generated script is associated with the source map.
  #   Source mapped scripts are only available when the source map and its sources have been
  #   associated with the recording via <code>Internal.addRecordingResource</code>.
  # <br><code>prettyPrinted</code>: An original script which was produced by pretty
  #   printing the associated generated script. Pretty printed scripts will
  #   automatically be created for other scripts which appear to contain minified
  #   code, including HTML page scripts. <code>scriptParsed</code> events will be
  #   emitted for a pretty printed script before the generated script.
  # <br><br>
  type ScriptKind extends string
    enum
      inlineScript
      scriptSource
      other
      html
      sourceMapped
      prettyPrinted

  # Get the source contents of a script.
  command getScriptSource
    parameters
      # Script to fetch the source for.
      ScriptId scriptId
    returns
      # Source contents of the script.
      string scriptSource
      # Content type of the source contents.
      ContentType contentType

  # Possible content types for script sources.
  type ContentType extends string
    enum
      text/javascript
      text/html

  # Get a compact representation of the locations where breakpoints can be set
  # in a region of a script.
  command getPossibleBreakpoints
    parameters
      # Script to return breakpoint locations for.
      ScriptId scriptId
      # If specified, earlier breakpoint locations will be excluded.
      optional ScriptLocation begin
      # If specified, later breakpoint locations will be excluded.
      optional ScriptLocation end
    returns
      # All breakpoint locations in the specified script and range.
      array of SameLineScriptLocations lineLocations

  # Location within a particular script.
  type ScriptLocation extends object
    properties
      # 1-indexed line in the script's source.
      integer line
      # 0-indexed column in the script's source.
      integer column

  # Set of locations which are all on the same line of the same script.
  type SameLineScriptLocations extends object
    properties
      # Common line number for the locations.
      integer line
      # Different column numbers for the locations.
      array of integer columns

  # Location within a script.
  type Location extends ScriptLocation
    properties
      ScriptId scriptId

  # A location in a generated scripts, along with corresponding locations in any
  # original scripts which the generated script was source mapped from.
  # The generated script location is the first element of the array.
  type MappedLocation extends array of Location

  # Get the mapped location for a script location.
  command getMappedLocation
    parameters
      Location location
    returns
      MappedLocation mappedLocation

  # ID for a breakpoint.
  type BreakpointId extends string

  # Set a breakpoint at a location.
  command setBreakpoint
    parameters
      # Location to set the breakpoint at.
      Location location
      # Any condition which must evaluate to a non-falsy value for an execution
      # point to hit the breakpoint.
      optional string condition
    returns
      # ID for the new breakpoint.
      BreakpointId breakpointId

  # Remove a breakpoint.
  command removeBreakpoint
    parameters
      BreakpointId breakpointId

  # Reasons why execution can pause when running forward or backward through
  # the recording.
  # <br>
  # <br><code>endpoint</code>: Ran to the beginning or end of the recording.
  # <br><code>breakpoint</code>: Hit an installed breakpoint.
  # <br><code>debuggerStatement</code>: Hit a debugger statement.
  # <br><code>step</code>: Reached the target of a step operation.
  # <br><br>
  type PauseReason extends string
    enum
      endpoint
      breakpoint
      debuggerStatement
      step

  # Description of an execution point.
  type PointDescription extends Recording.TimeStampedPoint
    properties
      # Location of the topmost frame, omitted if there are no frames on stack.
      optional MappedLocation frame

  # Description of a point where execution can pause after running forward or
  # backward through the recording.
  type PauseDescription extends PointDescription
    properties
      # Reason for pausing.
      PauseReason reason

  # Find where to pause when running forward from a point.
  command findResumeTarget
    parameters
      # Point to start the resume from.
      Recording.ExecutionPoint point
    returns
      # Point where execution should pause.
      PauseDescription target

  # Find where to pause when rewinding from a point.
  command findRewindTarget
    parameters
      # Point to start rewinding from.
      Recording.ExecutionPoint point
    returns
      # Point where execution should pause.
      PauseDescription target

  # Find where to pause when reverse-stepping from a point.
  command findReverseStepOverTarget
    parameters
      # Point to start reverse-stepping from.
      Recording.ExecutionPoint point
    returns
      # Point where execution should pause.
      PauseDescription target

  # Find where to pause when stepping from a point.
  command findStepOverTarget
    parameters
      # Point to start stepping from.
      Recording.ExecutionPoint point
    returns
      # Point where execution should pause.
      PauseDescription target

  # Find where to pause when stepping from a point and stopping at the entry of
  # any encountered call.
  command findStepInTarget
    parameters
      # Point to start stepping from.
      Recording.ExecutionPoint point
    returns
      # Point where execution should pause.
      PauseDescription target

  # Find where to pause when stepping out from a frame to the caller.
  command findStepOutTarget
    parameters
      # Point to step out from.
      Recording.ExecutionPoint point
    returns
      # Point where execution should pause.
      PauseDescription target

  # Blackbox a script or a region in it. Resume commands like
  # <code>findResumeTarget</code> will not return execution points in
  # blackboxed regions of a script.
  command blackboxScript
    parameters
      # Script to blackbox.
      ScriptId scriptId
      # If specified, earlier locations will keep their blackbox state.
      optional ScriptLocation begin
      # If specified, later locations will keep their blackbox state.
      optional ScriptLocation end

  # Unblackbox a script or a region in it.
  command unblackboxScript
    parameters
      # Script to unblackbox.
      ScriptId scriptId
      # If specified, earlier locations will keep their blackbox state.
      optional ScriptLocation begin
      # If specified, later locations will keep their blackbox state.
      optional ScriptLocation end

# The Console domain defines methods for accessing messages reported to the console.
#
# <br><br>All commands and events in this domain must include a <code>sessionId</code>.
domain Console

  # Find all messages in the recording. Does not return until the recording is
  # fully processed. Before returning, <code>newMessage</code> events will be
  # emitted for every console message in the recording.
  command findMessages

  # Describes a console message in the recording.
  event newMessage
    parameters
      # Contents of the message.
      Message message

  # Contents of a console message.
  type Message extends object
    properties
      # Source of the message.
      MessageSource source
      # Severity level of the message.
      MessageLevel level
      # Any text associated with the message.
      string text
      # Any URL associated with the message.
      optional string url
      # Any script associated with the message.
      optional Debugger.ScriptId scriptId
      # Any 1-indexed line number associated with the message.
      optional integer line
      # Any 0-indexed column number associated with the message.
      optional integer column
      # Point associated with the message. For messages added due to uncaught
      # exceptions this is the point at which the exception was thrown. For
      # other types of messages it is the point where the message was added.
      Debugger.PointDescription point
      # Pause ID associated with the message arguments and stack.
      Pause.PauseId pauseId
      # Any arguments to the message.
      optional array of Pause.Value argumentValues
      # Stack contents, omitted if there are no frames on the stack
      # at the message's point.
      optional array of Pause.FrameId stack
      # Data describing the message arguments and frames on the stack.
      Pause.PauseData data

  # Possible sources from which a message can originate.
  type MessageSource extends string
    enum
      PageError
      ConsoleAPI

  # Severity level of a message.
  type MessageLevel extends string
    enum
      info
      trace
      warning
      error
      assert

# The Pause domain is used to inspect the state of the program when it is paused
# at particular execution points.
#
# <br><br>All commands and events in this domain must include both a <code>sessionId</code>
# and a <code>pauseId</code>.
domain Pause

  # Unique identifier for a pause session where the program state can be inspected.
  # Pauses are each associated with a specific execution point, and when created
  # reflect the program state when it reached that point. Operations on a pause
  # can have side effects due to evaluations and so forth. These side effects will
  # affect later results produced for the same pause, but will have no effect on
  # the state of the program in other pauses.
  type PauseId extends string

  # Identifier for a call frame in a pause.
  type FrameId extends string

  # Identifier for a scope in a pause.
  type ScopeId extends string

  # Identifier for a JS object in a pause.
  type ObjectId extends string

  # Description of a value. At most one property will be specified.
  # If no properties are specified, the value is <code>undefined</code>.
  type Value extends object
    properties
      # For non-object values that are valid JSON values.
      optional any value
      # For object values.
      optional ObjectId object
      # String representation of a number that is not a valid JSON value:
      # <code>-0</code>, <code>Infinity</code>, <code>-Infinity</code>,
      # and <code>NaN</code>.
      optional string unserializableNumber
      # String representation of a bigint.
      optional string bigint
      # Set for values of variables which haven't been initialized yet.
      optional boolean uninitialized
      # Set for values which are not available for some reason.
      optional boolean unavailable

  # Description of a value, with an associated name.
  type NamedValue extends Value
    properties
      string name

  # Description of a stack frame.
  type Frame extends object
    properties
      # ID of this frame.
      FrameId frameId
      # Type of frame which is executing.
      FrameType type
      # For call frames, the name of the function being called.
      # Omitted if the function has no name.
      optional string functionName
      # For call frames, the location of the function being called.
      optional Debugger.MappedLocation functionLocation
      # Location in the source where this frame is paused at.
      Debugger.MappedLocation location
      # Scope chain for the call frame, from innermost to outermost.
      array of ScopeId scopeChain
      # <code>this</code> value of the call frame.
      Value this

  # Different kinds of stack frames.
  type FrameType extends string
    enum
      call
      global
      module
      eval

  # Description of a scope.
  type Scope extends object
    properties
      # ID of this scope.
      ScopeId scopeId
      # Type of this scope.
      ScopeType type
      # Set for the top-level lexical scope of a function.
      optional boolean functionLexical
      # For <code>global</code> and <code>with</code> scopes, the underlying object.
      optional ObjectId object
      # For <code>function</code> scopes, the called function.
      optional ObjectId callee
      # For <code>function</code> and <code>block</code> scopes, the scope bindings.
      optional array of NamedValue bindings

  # Possible types of a scope.
  type ScopeType extends string
    enum
      global
      with
      function
      block

  # Description of an object.
  type Object extends object
    properties
      # ID of this object.
      ObjectId objectId
      # Object class name.
      string className
      # Any preview data available for the object's contents.
      optional ObjectPreview preview

  # Description of some or all of an object's contents.
  type ObjectPreview extends object
    properties
      # Whether there are additional contents not in this preview.
      boolean overflow
      # ID of the prototype, if there is one.
      optional ObjectId prototypeId
      # Descriptors of the object's own properties.
      optional array of Property properties
      # Entries of container objects.
      optional array of ContainerEntry containerEntries
      # Results of evaluating getter properties from this or the prototype chain
      # on this object, if they could be evaluated without side effects.
      optional array of NamedValue getterValues
      # For container objects, the number of entries in the container.
      optional integer containerEntryCount
      # For RegExp objects, the string representation.
      optional string regexpString
      # For Date objects, the result of calling <code>getTime()</code>.
      optional integer dateTime
      # For Function objects, the name of the function.
      # Omitted for functions with no name.
      optional string functionName
      # For Function objects, the names of the parameters.
      optional array of string functionParameterNames
      # For scripted Function objects, the location of the function.
      optional Debugger.MappedLocation functionLocation
      # For DOM Node objects, information about the node.
      optional DOM.Node node
      # For CSSRule objects, information about the rule.
      optional CSS.Rule rule
      # For CSSStyleDeclaration objects, information about the style.
      optional CSS.StyleDeclaration style
      # For StyleSheet objects, information about the style sheet.
      optional CSS.StyleSheet styleSheet

  # Description of an object's own property. The <code>NamedValue</code> members
  # indicate the property's name and its value if it is a data descriptor.
  type Property extends NamedValue
    properties
      # Configuration flags for the property, omitted if the property is
      # writable, configurable, and enumerable (a bitmask of <code>7</code>).
      optional PropertyConfigurationFlags flags
      # Any getter function if this is an accessor property.
      optional ObjectId get
      # Any setter function if this is an accessor property.
      optional ObjectId set

  # Compact bitmask of configuration flags on a property. Possible values in the mask
  # are <code>1</code> (whether the property is writable), <code>2</code>
  # (whether the property is configurable), <code>4</code> (whether the
  # property is enumerable), and combinations of these values using bitwise-or.
  type PropertyConfigurationFlags extends integer

  # An entry in a container object (maps, sets, weak maps, and weak sets).
  type ContainerEntry extends object
    properties
      # For maps and weak maps, this entry's key.
      optional Value key
      # This entry's value.
      Value value

  # Block of data from this pause which might be useful to the protocol client.
  # To reduce the number of back-and-forth calls required over the protocol,
  # data which wasn't specifically asked for can be returned by commands or
  # events. <code>PauseData</code> objects will not duplicate data from a
  # <code>PauseData</code> object produced earlier for the same pause.
  type PauseData extends object
    properties
      optional array of Frame frames
      optional array of Scope scopes
      optional array of Object objects

  # Result of performing an effectful operation.
  type Result extends object
    properties
      # If the operation returned normally, the returned value.
      optional Value returned
      # If the operation threw an exception, the thrown value.
      optional Value exception
      # Set if the operation failed and no value was returned or thrown.
      # This can happen when operations interact with the system in an
      # unsupported way (such as by calling <code>dump()</code>)
      # or if the evaluation took too long and was forcibly terminated.
      optional boolean failed
      # Any additional data associated with the returned/thrown value.
      PauseData data

  # Evaluate an expression in the context of a call frame. This command is
  # effectful.
  command evaluateInFrame
    parameters
      # Frame to perform the evaluation in.
      FrameId frameId
      # Expression to evaluate.
      string expression
      # Any extra bindings to add to the evaluation's scope.
      optional array of NamedValue bindings
    returns
      # Result of the evaluation.
      Result result

  # Evaluate an expression in a global context. This command is effectful.
  command evaluateInGlobal
    parameters
      # Expression to evaluate.
      string expression
      # Any extra bindings to add to the evaluation's scope.
      optional array of NamedValue bindings
    returns
      # Result of the evaluation.
      Result result

  # Read a property from an object. This command is effectful.
  command getObjectProperty
    parameters
      # Object to get the property from.
      ObjectId object
      # Property to get.
      string name
    returns
      # Result of getting the property.
      Result result

  # Call a function object. This command is effectful.
  command callFunction
    parameters
      # Function or other object to call.
      ObjectId object
      # <code>this</code> value to use for the call.
      Value thisValue
      # Arguments to use for the call.
      array of Value argumentValues
    returns
      # Result of the call.
      Result result

  # Read a property from an object, then call the result. This command is effectful.
  command callObjectProperty
    parameters
      # Object to perform the call on.
      ObjectId object
      # Property to call.
      string name
      # Arguments to use for the call.
      array of Value argumentValues
    returns
      # Result of the call.
      Result result

  # Load a complete preview for an object.
  command getObjectPreview
    parameters
      # Object to load the preview for.
      ObjectId object
    returns
      # Returned data. This includes a preview for the object which does not
      # have <code>overflow</code> set, and additional data for objects which
      # it references.
      PauseData data

  # Load a scope's contents.
  command getScope
    parameters
      # Scope to load.
      ScopeId scope
    returns
      # Returned data. This includes the scope's contents, and additional data
      # for objects which it references.
      PauseData data

  # Get the topmost frame on the stack.
  command getTopFrame
    returns
      # The topmost frame.
      Frame frame
      # Any data associated with the frame.
      PauseData data

  # Get all frames on the stack.
  command getAllFrames
    returns
      # All frames on the stack.
      array of Frame frames
      # Any data associated with the frames.
      PauseData data

  # Get the values of a frame's arguments.
  command getFrameArguments
    parameters
      # Frame to get the parameters for.
      FrameId frameId
    returns
      # Current values of each of the frame's arguments. Omitted for non-call frames.
      optional array of Value argumentValues
      # Any data associated with the argument values.
      PauseData data

  # Get the points of all steps that are executed by a frame.
  command getFrameSteps
    parameters
      # Frame to get steps for.
      FrameId frameId
    returns
      # Execution points for all steps which the frame executes. In the case of
      # async/generator frames, only steps that are executed while the current
      # frame is on the stack are included: steps in the same logical frame that
      # that are separated from the current point by an <code>await</code> or
      # <code>yield</code> are excluded.
      array of Debugger.PointDescription steps

  # Get any exception that is being thrown at this point.
  command getExceptionValue
    returns
      # If an exception is being thrown, the exception's value.
      optional Value exception
      # Any additional data associated with the exception.
      PauseData data

# The DOM domain is used to inspect the DOM at particular execution points.
# Inspecting the DOM requires a <code>Pause.PauseId</code>, and DOM nodes
# are identified by a <code>Pause.ObjectId</code>.
#
# <br><br>All commands and events in this domain must include both a <code>sessionId</code>
# and a <code>pauseId</code>.
domain DOM

  # Get the page's root document.
  command getDocument
    returns
      # ID for the document.
      Pause.ObjectId document
      # Information about the document and related nodes.
      Pause.PauseData data

  # Load previews for an object and its transitive parents up to the
  # root document.
  command getParentNodes
    parameters
      # Node to load the previews for.
      Pause.ObjectId node
    returns
      # Returned data, including previews for the object and its transitive parents.
      Pause.PauseData data

  # Call querySelector() on a node in the page.
  command querySelector
    parameters
      # Base node for the query.
      Pause.ObjectId node
      # Selector to query.
      string selector
    returns
      # ID of the found node, omitted if none was found.
      optional Pause.ObjectId result
      # Information about the returned node and related nodes, including all
      # parent nodes up to the root document.
      Pause.PauseData data

  # Get the event listeners attached to a node in the page.
  command getEventListeners
    parameters
      # Node to get listeners for.
      Pause.ObjectId node
    returns
      # All event listeners for the node.
      array of EventListener listeners
      # Additional information about the event listeners.
      Pause.PauseData data

  # Description of an event listener on a page.
  type EventListener extends object
    properties
      # Node the listener is attached to.
      Pause.ObjectId node
      # Handler function associated with the listener.
      Pause.ObjectId handler
      # Event being listened for.
      string type
      # Whether the listener captures events.
      boolean capture

  # Description of a node's contents which is attached to its
  # associated <code>Pause.ObjectPreview.node</code>.
  type Node extends object
    properties
      # Value of <code>node.nodeType</code>.
      integer nodeType
      # Value of <code>node.nodeName</code>.
      string nodeName
      # Value of <code>node.nodeValue</code>.
      optional string nodeValue
      # Value of <code>node.isConnected</code>.
      boolean isConnected
      # For element nodes, the attributes.
      optional array of Attr attributes
      # For pseudo elements, the pseudo type.
      optional PseudoType pseudoType
      # For element nodes, ID of any inline style declaration.
      optional Pause.ObjectId style
      # ID of any <code>node.parentNode</code>.
      optional Pause.ObjectId parentNode
      # IDs of all <code>node.childNodes</code>.
      optional array of Pause.ObjectId childNodes
      # For document nodes, the <code>URL</code> property.
      optional string documentURL

  # Description of an element attribute.
  type Attr extends object
    properties
      # Value of <code>attr.name</code>.
      string name
      # Value of <code>attr.value</code>.
      string value

  # Type of a pseudo element.
  type PseudoType extends string
    enum
      before
      after
      marker

  # Get boxes for a node.
  command getBoxModel
    parameters
      # Node to get boxes for.
      Pause.ObjectId node
    returns
      # Box model data for the node.
      BoxModel model

  # Description of the box model for a node.
  type BoxModel extends object
    properties
      # Node this is the box model for.
      Pause.ObjectId node
      # Quads holding the node's content.
      Quads content
      # Quads including the content and any padding between the border.
      Quads padding
      # Quads including the border.
      Quads border
      # Quads including the border and any margin between other nodes.
      Quads margin

  # Compact representation of an array of DOMQuads, projected onto the <code>x/y</code>
  # plane (i.e. <code>z</code> and <code>w</code> values in points are ignored).
  # Each quad is 8 elements, with the <code>x</code> and <code>y</code> coordinates
  # of the four points in the quad. The entire array will have a length that is a
  # multiple of 8.
  type Quads extends array of number

  # Get the bounding client rect for a node.
  command getBoundingClientRect
    parameters
      # Node to get the bounds for.
      Pause.ObjectId node
    returns
      # Bounding client rect for the node.
      Rect rect

  # Get the bounding client rect for all elements on the page.
  command getAllBoundingClientRects
    returns
      # All elements on the page and their bounding client rects. These are
      # are given in stacking order: elements earlier in the list will be drawn
      # in front of later elements.
      array of NodeBounds elements

  # Compact representation of a DOMRect. A rect has four elements, listing the
  # rect's <code>left</code>, <code>top</code>, <code>right</code>, and
  # <code>bottom</code> values in order.
  type Rect extends array of number

  # Describes the bounding client rect for a node.
  type NodeBounds extends object
    properties
      # Node being described.
      Pause.ObjectId node
      # Bounding client rect for the node.
      Rect rect

  # Search the DOM for nodes containing a string.
  command performSearch
    parameters
      # Text to search for.
      string query
    returns
      # Nodes whose name, attributes, or text content contains the query string.
      array of Pause.ObjectId nodes
      # Any data associated with the returned nodes, including all parent nodes
      # up to the root document.
      Pause.PauseData data

# The CSS domain is used to inspect the CSS state at particular execution points.
#
# <br><br>All commands and events in this domain must include both a <code>sessionId</code>
# and a <code>pauseId</code>.
domain CSS

  # Get the styles computed for a node.
  command getComputedStyle
    parameters
      Pause.ObjectId node
    returns
      array of ComputedStyleProperty computedStyle

  # A style which is applied to a node.
  type ComputedStyleProperty extends object
    properties
      # Name of the style.
      string name
      # Value of the style.
      string value

  # Get the style rules being applied to a node.
  command getAppliedRules
    parameters
      Pause.ObjectId node
    returns
      # IDs of all style rules being applied to the node.
      array of Pause.ObjectId rules
      # Information about the rules and related objects.
      Pause.PauseData data

  # Description of a CSSRule's contents which is attached to its
  # associated <code>Pause.ObjectPreview.rule</code>.
  type Rule extends object
    properties
      # Value of <code>rule.type</code>.
      integer type
      # Value of <code>rule.cssText</code>.
      string cssText
      # The ID of any style sheet this rule is associated with.
      optional Pause.ObjectId parentStyleSheet
      # Start line in the parent style sheet (1-indexed).
      optional integer startLine
      # Start column in the parent style sheet (0-indexed).
      optional integer startColumn
      # For <code>CSSStyleRule</code> objects, the value of <code>rule.selectorText</code>.
      optional string selectorText
      # For <code>CSSStyleRule</code> objects, the ID of the rule's style declaration.
      optional Pause.ObjectId style

  # Description of a CSSStyleDeclaration's contents which is attached to its
  # associated <code>Pause.ObjectPreview.style</code>.
  type StyleDeclaration extends object
    properties
      # Value of <code>style.cssText</code>.
      string cssText
      # If this declaration originates from a CSSStyleRule, ID of that rule.
      optional Pause.ObjectId parentRule
      # Style properties of this declaration.
      array of StyleProperty properties

  # Information about a style property declaration.
  type StyleProperty extends ComputedStyleProperty
    properties
      # Whether the property is marked <code>!important</code>. Defaults to
      # <code>false</code> if omitted.
      optional boolean important

  # Description of a StyleSheet's contents which is attached to its
  # associated <code>Pause.ObjectPreview.styleSheet</code>.
  type StyleSheet extends object
    properties
      # URL of the style sheet.
      optional string href

# The Analysis domain is used to efficiently analyze the program state at many
# execution points. Analysis specifications are based on the MapReduce
# algorithm: a map operation is performed on all the execution points of
# interest, and the results are reduced to a summary afterwards.
#
# <br><br>The life cycle of an analysis is as follows. First, use <code>createAnalysis</code>
# to create the analysis and specify its map and reduce operations. Next, use one
# or more other commands to specify the set of execution points to apply the
# analysis to. Finally, use <code>runAnalysis</code> to start running the
# analysis and generate <code>analysisResult</code> events.
#
# <br><br>Currently, analyses can only be applied to one session/recording.
# This restriction will be relaxed in the future.
domain Analysis

  # Unique identifier for an analysis.
  type AnalysisId extends string

  # Start specifying a new analysis.
  command createAnalysis
    parameters
      # Body of the mapper function. The mapper function takes two arguments:
      # <code>input</code> is a <code>MapInput</code> object, and
      # <code>sendCommand</code> is a function that can be passed a command
      # name and parameters (in that order) and synchronously returns the
      # command result. Only methods from the <code>Pause</code> domain may
      # be used with <code>sendCommand</code>. The mapper function must
      # return an array of <code>AnalysisEntry</code> objects.
      string mapper
      # Body of the reducer function. The reducer function takes two arguments:
      # <code>key</code> is an <code>AnalysisKey</code>, and <code>values</code>
      # is an array of <code>AnalysisValue</code>. All the values
      # were associated with the key by an earlier call to <code>mapper</code>
      # <strong>or</strong> <code>reducer</code>. The reducer function must
      # return an <code>AnalysisValue</code>, which summarizes all
      # the input values and will be associated with <code>key</code> for
      # <code>analysisResult</code> events or further calls to the reducer.
      # The reducer may be omitted if no reduction phase is needed.
      optional string reducer
      # Whether effectful commands in the <code>Pause</code> domain might be
      # sent by the mapper function. An analysis which does not use effectful
      # commands will run more efficiently. See the <code>Pause</code> domain
      # for which commands are effectful.
      boolean effectful
    returns
      # ID of the resulting analysis.
      AnalysisId analysisId

  # Input to the mapper function.
  type MapInput extends Recording.TimeStampedPoint
    properties
      # Associated session ID for the current execution point.
      Session.SessionId sessionId
      # Pause ID created for the current execution point.
      Pause.PauseId pauseId

  # Apply the analysis to every point where a script location executes.
  command addLocation
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Session containing the script.
      Session.SessionId sessionId
      # Location to apply the analysis to.
      Debugger.Location location

  # Apply the analysis to every function entry point in a region of a script.
  command addFunctionEntryPoints
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Associated session.
      Session.SessionId sessionId
      # Script to look for function entry points in.
      Debugger.ScriptId scriptId
      # If specified, earlier functions will be excluded.
      optional Debugger.ScriptLocation begin
      # If specified, later functions will be excluded.
      optional Debugger.ScriptLocation end

  # Apply the analysis to a random selection of points.
  command addRandomPoints
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Associated session.
      Session.SessionId sessionId
      # Maximum number of points to apply the analysis to.
      integer numPoints

  # Apply the analysis to the entry point of every handler for an event.
  command addEventHandlerEntryPoints
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Associated session.
      Session.SessionId sessionId
      # Type of event whose handler calls the analysis should be applied to.
      string eventType

  # Apply the analysis to every point where an exception is thrown.
  command addExceptionPoints
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Associated session.
      Session.SessionId sessionId

  # Run the analysis. After this is called, <code>analysisResult</code> and/or
  # <code>analysisError</code> events will be emitted as results are gathered.
  # Does not return until the analysis has finished and all events have been
  # emitted.
  command runAnalysis
    parameters
      # Analysis to run.
      AnalysisId analysisId

  # Describes some results of an analysis.
  event analysisResult
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Results for different keys. If a reducer was specified, a given key can
      # only appear once in the results emitted for the analysis.
      array of AnalysisEntry results

  # Describes an error that occurred when running an analysis mapper or reducer
  # function. This will not be emitted for every error, but if there was any
  # error then at least one event will be emitted.
  event analysisError
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Description of the error.
      string error

  # Release an analysis and its server side resources. If the analysis is
  # running, it will be canceled, preventing further <code>analysisResult</code>
  # and <code>analysisError</code> events from being emitted.
  command releaseAnalysis
    parameters
      # Analysis to release.
      AnalysisId analysisId

  # Find the set of execution points at which an analysis will run. After this
  # is called, <code>analysisPoints</code> events will be emitted as the points
  # are found. Does not return until events for all points have been emitted.
  # Can only be used after the analysis has started running.
  command findAnalysisPoints
    parameters
      # Analysis to find points for.
      AnalysisId analysisId

  # Describes some points at which an analysis will run.
  event analysisPoints
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Some points at which the analysis will run.
      array of Debugger.PointDescription points

  # Key for an analysis result. This can be any JSON value. Keys are equivalent
  # if they are structurally equivalent: they have the same contents, though
  # object keys may be ordered differently when stringified.
  type AnalysisKey extends any

  # Value for an analysis result. This can be any JSON value.
  type AnalysisValue extends any

  # A key/value pair produced by an analysis.
  type AnalysisEntry extends object
    properties
      AnalysisKey key
      AnalysisValue value

# The Internal domain is for use by Web Replay's own tools and other software.
# While use of this domain is not restricted, it won't be very helpful for other
# users.
domain Internal

  # Add text to the server side log for this connection.
  command log
    parameters
      # Text to log. This must not contain identifying information about the
      # user or website being visited.
      string text
      # Timestamp from Date.now() to associate with this logged text.
      integer time

  # Create a new recording.
  command createRecording
    parameters
      # Build Id of the software which produced the recording.
      Recording.BuildId buildId
    returns
      # Identifier for the recording.
      Recording.RecordingId recordingId

  # Add data to a recording. The next message sent after this must be a binary
  # message with the data described by this message. Uploaded recordings are not
  # explicitly finished; replay sessions created for a recording will include
  # all data which was successfully uploaded.
  command addRecordingData
    parameters
      # ID of the recording data is being added to. This recording must have
      # been produced by a createRecording command previously sent on this
      # connection.
      Recording.RecordingId recordingId
      # Byte offset into the recording's blob of the data being sent.
      integer offset
      # Byte length of the data being sent.
      integer length

  # Add metadata about a recording.
  command addRecordingDescription
    parameters
      # ID of the recording being described.
      Recording.RecordingId recordingId
      # Total byte length of the recording.
      integer length
      # Duration of the entire recording.
      Recording.TimeStamp duration
      # Mime type for graphics data at the end of the recording.
      optional Graphics.MimeType lastScreenMimeType
      # Raw graphics data for the end of the recording.
      optional string lastScreenData

  # Information about a file based resource. Currently, resources are used for
  # source maps and original sources.
  type Resource extends object
    properties
      # URL of the resource.
      string url
      # Checksum of the resource's contents.
      string checksum

  # Determine whether a resource is known to the cloud service.
  command hasResource
    parameters
      # Resource to look for.
      Resource resource
    returns
      # Whether the resource's contents are known.
      boolean known

  # Upload a resource's contents to the cloud service.
  command addResource
    parameters
      # Resource to add.
      Resource resource
      # Text contents of the resource.
      string contents

  # Associate a resource with a recording.
  command addRecordingResource
    parameters
      # ID of the recording.
      Recording.RecordingId recordingId
      # Resource which the recording is associated with.
      Resource resource

  # Get filters for where to add more detailed assertions when recording that
  # behavior is consistent with the replay. These are used when analyzing crashes.
  command getAssertionFilters
    returns
      optional object filters
