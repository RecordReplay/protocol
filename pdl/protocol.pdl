version
  major 0
  minor 1

# The Recording domain defines methods for managing recordings.
domain Recording

  # Globally unique identifier for a recording.
  type RecordingId extends string

  # Unique identifier for the software used to produce a recording.
  type BuildId extends string

  # A point in time within a recording, specified as the elapsed time in
  # milliseconds since the recording started. Sub-millisecond resolution
  # is possible.
  type TimeStamp extends number

  # Description for a range of time within a recording.
  type TimeRange extends object
    properties
      TimeStamp begin
      TimeStamp end

  # Identifier for a point within a recording at which the program state can be
  # inspected. Execution points are integers encoded as base-10 numeric strings,
  # such that smaller numbered points precede larger numbered ones. They can be
  # compared by e.g. converting to BigInts and then comparing those BigInts.
  type ExecutionPoint extends string

  # An execution point and its associated time stamp. Recordings always have a
  # beginning execution point with value "0" and a time stamp of zero.
  type TimeStampedPoint extends object
    properties
      ExecutionPoint point
      TimeStamp time

  # A mouse event that occurs somewhere in a recording.
  type MouseEvent extends TimeStampedPoint
    properties
      # Kind of mouse event.
      MouseEventKind kind
      # X coordinate of the event, relative to the upper left of the page's main window.
      integer clientX
      # Y coordinate of the event, relative to the upper left of the page's main window.
      integer clientY

  # Kinds of mouse events described in a recording.
  type MouseEventKind extends string
    enum
      mousemove
      mousedown

  # Get a description of a recording.
  command getDescription
    parameters
      # Recording to get the description for.
      RecordingId recordingId
    returns
      # Duration of the recording.
      TimeStamp duration
      # Painted graphics at the end of the recording.
      optional Graphics.ScreenShot lastScreen

  # Create a session for inspecting a recording.
  command createSession
    parameters
      # Recording to load into the session.
      RecordingId recordingId
    returns
      # Identifier for the new session.
      Session.SessionId sessionId

  # Release a session and allow its resources to be reclaimed.
  command releaseSession
    parameters
      # Session to release.
      Session.SessionId sessionId

# The Session domain defines methods for using recording sessions. In order to
# inspect a recording, it must first be loaded into a session via
# <code>Recording.createSession</code>.
#
# After the session is created, it is an unprocessed state. Commands sent using
# the session to query information about the recording will only find
# information about parts of the recording that have been processed. Processing
# starts automatically after the session is created.
#
# <br><br>All commands and events in this domain must include a <code>sessionId</code>.
domain Session

  # Unique identifier for a session which a recording has been loaded into.
  type SessionId extends string

  # Does not return until the recording is fully processed. Before returning,
  # <code>missingRegions</code> and <code>unprocessedRegions</code> events will
  # be periodically emitted.
  command ensureProcessed

  # Event describing regions of the recording that have not been uploaded.
  event missingRegions
    parameters
      # Regions that have not been uploaded.
      array of Recording.TimeRange regions

  # Event describing regions of the recording that have not been processed.
  event unprocessedRegions
    parameters
      # Any missing regions are also unprocessed regions.
      array of Recording.TimeRange regions

  # Find all points in the recording at which a mouse move or click occurred.
  # Does not return until the recording is fully processed. Before returning,
  # <code>mouseEvents</code> events will be periodically emitted. The union
  # of all these events describes all mouse events in the recording.
  command findMouseEvents

  # Describes some mouse events that occur in the recording.
  event mouseEvents
    parameters
      array of Recording.MouseEvent events

  # Get the last execution point in the recording.
  command getEndpoint
    returns
      Recording.TimeStampedPoint endpoint

  # Create a pause describing the state at an execution point.
  command createPause
    parameters
      # Point to create the pause at.
      Recording.ExecutionPoint point
    returns
      # Identifier for the new pause.
      Pause.PauseId pauseId
      # IDs of all frames on the stack. Omitted if there are no
      # frames on the stack at this point.
      optional array of Pause.FrameId stack
      # Data describing the frames on the stack and the in scope
      # variables of the topmost frame.
      Pause.PauseData data

  # Release a pause and allow its resources to be reclaimed.
  command releasePause
    parameters
      Pause.PauseId pauseId

# The Graphics domain defines methods for accessing a recording's graphics data.
#
# <br><br>All commands and events in this domain must include a <code>sessionId</code>.
domain Graphics

  # Find all points in the recording at which paints occurred. Does not return
  # until the recording is fully processed. Before returning,
  # <code>paintPoints</code> events will be periodically emitted. The union
  # of all these events describes all paint points in the recording.
  command findPaints

  # Describes some points in the recording at which paints occurred. No paint
  # will occur for the recording's beginning execution point.
  event paintPoints
    parameters
      array of PaintPoint paints

  # Get the graphics at a point where a paint occurred.
  command getPaintContents
    parameters
      # Execution point to get the graphics for. This must have been listed in
      # a <code>paintPoints</code> event.
      Recording.ExecutionPoint point
      # Encoding format for the returned screen.
      MimeType mimeType
    returns
      # Screen shot of the rendered graphics.
      ScreenShot screen

  # Graphics encoding format.
  type MimeType extends string
    enum
      image/jpeg
      image/png

  # Compact hash code for a screen shot.
  type ScreenShotHash extends string

  # Compact description of the graphics rendered at some point.
  type ScreenShotDescription extends object
    properties
      # Encoding used for the screen shot.
      MimeType mimeType
      # Hash code for the screen shot's graphics data.
      ScreenShotHash hash

  # Complete contents of the graphics rendered at some point.
  type ScreenShot extends ScreenShotDescription
    properties
      # Raw graphics data encoded in base64.
      string data

  # Information about a point where a paint occurred.
  type PaintPoint extends Recording.TimeStampedPoint
    properties
      # Available screen shots for the graphics rendered at this point.
      array of ScreenShotDescription screenShots

# The Debugger domain defines methods for accessing JS scripts and navigating
# around the recording using breakpoints, stepping, and so forth.
#
# <br><br>All commands and events in this domain must include a <code>sessionId</code>.
domain Debugger

  # Find all scripts in the recording. Does not return until the recording is
  # fully processed. Before returning, <code>scriptParsed</code> events will be
  # emitted for every script in the recording.
  command findScripts

  # Describes a script that was successfully parsed.
  event scriptParsed
    parameters
      # ID for the script.
      ScriptId scriptId
      # URL of the script. Omitted for dynamically generated scripts (from eval etc.).
      optional string url
      # Any source map URL for the script.
      optional string sourceMapURL

  # Unique ID for a script.
  type ScriptId extends string

  # Get the source contents of a script.
  command getScriptSource
    parameters
      # Script to fetch the source for.
      ScriptId scriptId
    returns
      # Source contents of the script.
      string scriptSource
      # Content type of the source contents. For scripts originating from inline
      # <code>script</code> tags this will be <code>text/html</code>, and the
      # source includes the associated HTML file's entire contents. For other
      # scripts this is <code>text/javascript</code>.
      ContentType contentType

  # Possible content types for script sources.
  type ContentType extends string
    enum
      text/javascript
      text/html

  # Get a compact representation of the locations where breakpoints can be set
  # in a region of a script.
  command getPossibleBreakpoints
    parameters
      # Script to return breakpoint locations for.
      ScriptId scriptId
      # If specified, earlier breakpoint locations will be excluded.
      optional ScriptLocation begin
      # If specified, later breakpoint locations will be excluded.
      optional ScriptLocation end
    returns
      # All breakpoint locations in the specified script and range.
      array of SameLineScriptLocations lineLocations

  # Location within a particular script.
  type ScriptLocation extends object
    properties
      # 0-indexed line in the script's source.
      integer line
      # 0-indexed column in the script's source.
      integer column

  # Set of locations which are all on the same line of the same script.
  type SameLineScriptLocations extends object
    properties
      # Common line number for the locations.
      integer line
      # Different column numbers for the locations.
      array of integer columns

  # Location within a script.
  type Location extends ScriptLocation
    properties
      ScriptId scriptId

  # ID for a breakpoint.
  type BreakpointId extends string

  # Set a breakpoint at a location.
  command setBreakpoint
    parameters
      # Location to set the breakpoint at.
      Location location
      # Any condition which must evaluate to a non-falsy value for an execution
      # point to hit the breakpoint.
      optional string condition
    returns
      # ID for the new breakpoint.
      BreakpointId breakpointId

  # Remove a breakpoint.
  command removeBreakpoint
    parameters
      BreakpointId breakpointId

  # Basic description of a point where execution can pause.
  type PauseDescription extends Recording.TimeStampedPoint
    properties
      # Location of the topmost frame, omitted if there are no frames on stack.
      optional Location frame

  # Find the point to pause at when running forward from a point.
  command findResumeTarget
    parameters
      # Point to start the resume from.
      Recording.ExecutionPoint point
    returns
      # Point where execution should pause when resuming.
      PauseDescription target

  # Find the point to pause at when rewinding from a point.
  command findRewindTarget
    parameters
      # Point to start rewinding from.
      Recording.ExecutionPoint point
    returns
      # Point where execution should pause when rewinding.
      PauseDescription target

# The Pause domain is used to inspect the state of the program when it is paused
# at particular execution points.
#
# <br><br>All commands and events in this domain must include both a <code>sessionId</code>
# and a <code>pauseId</code>.
domain Pause

  # Unique identifier for a pause session where the program state can be inspected.
  # Pauses are each associated with a specific execution point, and when created
  # reflect the program state when it reached that point. Operations on a pause
  # can have side effects due to evaluations and so forth. These side effects will
  # affect later results produced for the same pause, but will have no effect on
  # the state of the program in other pauses.
  type PauseId extends string

  # Identifier for a call frame in a pause.
  type FrameId extends string

  # Identifier for a scope in a pause.
  type ScopeId extends string

  # Identifier for a JS object in a pause.
  type ObjectId extends string

  # Description of a value. At most one property will be specified.
  # If no properties are specified, the value is <code>undefined</code>.
  type Value extends object
    properties
      # For non-object values that are valid JSON values.
      optional any value
      # For non-object values that are not valid JSON values.
      optional UnserializableValue unserializable
      # For object values.
      optional ObjectId object

  # Description of a value, with an associated name.
  type NamedValue extends Value
    properties
      string name

  # Description of a stack frame.
  type Frame extends object
    properties
      # ID of this frame.
      FrameId frameId
      # Type of frame which is executing.
      FrameType type
      # For call frames, the name of the function being called.
      optional string functionName
      # Location in the source of where this frame is paused at.
      Debugger.Location location
      # Scope chain for the call frame, from innermost to outermost.
      array of ScopeId scopeChain
      # <code>this</code> value of the call frame.
      Value this

  # Different kinds of stack frames.
  type FrameType extends string
    enum
      call
      global
      module
      eval

  # Description of a scope.
  type Scope extends object
    properties
      # ID of this scope.
      ScopeId scopeId
      # Type of this scope.
      ScopeType type
      # Set for the top-level lexical scope of a function.
      optional boolean functionLexical
      # For <code>global</code> and <code>with</code> scopes, the underlying object.
      optional ObjectId object
      # For <code>function</code> and <code>block</code> scopes, the scope bindings.
      optional array of NamedValue bindings

  # Possible types of a scope.
  type ScopeType extends string
    enum
      global
      with
      function
      block

  # Description of an object.
  type Object extends object
    properties
      # ID of this object.
      ObjectId objectId
      # Object class name.
      string className
      # ID of the prototype, if there is one.
      optional ObjectId prototypeId
      # String representation of the object, if available.
      optional string description
      # Any preview data available for the object's properties.
      optional ObjectPreview preview

  # Description of some or all of an object's contents.
  type ObjectPreview extends Object
    properties
      # Whether there are additional contents not in this preview.
      boolean overflow
      # Descriptors of the object's own properties.
      optional array of Property properties
      # Entries of container objects.
      optional array of ContainerEntry containerEntries
      # Results of evaluating getter properties from this or the prototype chain
      # on this object, if they could be evaluated without side effects.
      optional array of NamedValue getterValues

  # Description of an object's own property. The <code>NamedValue</code> members
  # indicate the property's name and its value if it is a data descriptor.
  type Property extends NamedValue
    properties
      # Configuration flags for the property, omitted if the property is
      # writable, configurable, and enumerable (a bitmask of <code>7</code>).
      optional PropertyConfigurationFlags flags
      # Any getter function if this is an accessor property.
      optional ObjectId get
      # Any setter function if this is an accessor property.
      optional ObjectId set

  # Compact bitmask of configuration flags on a property. Possible values in the mask
  # are <code>1</code> (whether the property is writable), <code>2</code>
  # (whether the property is configurable), <code>4</code> (whether the
  # property is enumerable), and combinations of these values using bitwise-or.
  type PropertyConfigurationFlags extends integer

  # An entry in a container object (maps, sets, weak maps, and weak sets).
  type ContainerEntry extends Object
    properties
      # For maps and weak maps, this entry's key.
      optional Value key
      # This entry's value.
      Value value

  # String representation of a defined value that is not a valid JSON value:
  # <code>-0</code>, <code>Infinity</code>, <code>-Infinity</code>,
  # <code>NaN</code>, and BigInts.
  type UnserializableValue extends string

  # Block of data from this pause which might be useful to the protocol client.
  # To reduce the number of back-and-forth calls required over the protocol,
  # data which wasn't specifically asked for can be returned by commands or
  # events. <code>PauseData</code> objects will not duplicate data from a
  # <code>PauseData</code> object produced earlier for the same pause.
  type PauseData extends object
    properties
      optional array of Frame frames
      optional array of Scope scopes
      optional array of Object objects

  # Evaluate an expression in the context of a call frame.
  command evaluateInFrame
    parameters
      # Frame to perform the evaluation in.
      FrameId frameId
      # Expression to evaluate.
      string expression
    returns
      # If execution returned normally, the evaluation result.
      optional Value result
      # If execution threw an exception, the thrown value.
      optional Value exception
      # Any additional data associated with the returned/thrown value.
      PauseData data

  # Get the topmost frame on the stack.
  command getTopFrame
    returns
      Frame frame

  # Get all frames on the stack.
  command getAllFrames
    returns
      array of Frame frames

  # Get the values of a frame's arguments.
  command getFrameArguments
    parameters
      # Frame to get the parameters for.
      FrameId frameId
    returns
      # Current values of each of the frame's arguments.
      array of Value argumentValues

# The Analysis domain is used to efficiently analyze the program state at many
# execution points. Analysis specifications are based on the MapReduce
# algorithm: a map operation is performed on all the execution points of
# interest, and the results are reduced to a summary afterwards.
#
# <br><br>The life cycle of an analysis is as follows. First, use <code>createAnalysis</code>
# to create the analysis and specify its map and reduce operations. Next, use one
# or more other commands to specify the set of execution points to apply the
# analysis to. Finally, use <code>runAnalysis</code> to start running the
# analysis and generate <code>analysisResult</code> events.
#
# <br><br>Currently, analyses can only be applied to one session/recording.
# This restriction will be relaxed in the future.
domain Analysis

  # Unique identifier for an analysis.
  type AnalysisId extends string

  # Start specifying a new analysis.
  command createAnalysis
    parameters
      # Body of the mapper function. The mapper function takes two arguments:
      # <code>input</code> is a <code>MapInput</code> object, and
      # <code>sendCommand</code> is a function that can be passed a command
      # name and parameters (in that order) and synchronously returns the
      # command result. Only methods from the <code>Pause</code> domain may
      # be used with <code>sendCommand</code>. The mapper function must
      # return an array of <code>AnalysisEntry</code> objects.
      string mapper
      # Body of the reducer function. The reducer function takes two arguments:
      # <code>key</code> is an <code>AnalysisKey</code>, and <code>values</code>
      # is an array of <code>AnalysisValue</code>. All the values
      # were associated with the key by an earlier call to <code>mapper</code>
      # <strong>or</strong> <code>reducer</code>. The reducer function must
      # return an <code>AnalysisValue</code>, which summarizes all
      # the input values and will be associated with <code>key</code> for
      # <code>analysisResult</code> events or further calls to the reducer.
      # The reducer may be omitted if no reduction phase is needed.
      optional string reducer
      # Whether effectful commands in the <code>Pause</code> domain might be
      # sent by the mapper function. An analysis which does not use effectful
      # commands will run more efficiently. Effectful commands are
      # <code>Pause.evaluateInFrame</code>.
      boolean effectful
    returns
      # ID of the resulting analysis.
      AnalysisId analysisId

  # Input to the mapper function.
  type MapInput extends Recording.TimeStampedPoint
    properties
      # Associated session ID for the current execution point.
      Session.SessionId sessionId
      # Pause ID created for the current execution point.
      Pause.PauseId pauseId

  # Apply the analysis to every point where a script location executes.
  command addLocation
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Session containing the script.
      Session.SessionId sessionId
      # Location to apply the analysis to.
      Debugger.Location location

  # Apply the analysis to every function entry point in a region of a script.
  command addFunctionEntryPoints
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Associated session.
      Session.SessionId sessionId
      # Script to look for function entry points in.
      Debugger.ScriptId scriptId
      # If specified, earlier functions will be excluded.
      optional Debugger.ScriptLocation begin
      # If specified, later functions will be excluded.
      optional Debugger.ScriptLocation end

  # Run the analysis. After this is called, <code>analysisResult</code> and/or
  # <code>analysisError</code> events will be emitted as results are gathered.
  # Does not return until the analysis has finished and all events have been
  # emitted.
  command runAnalysis
    parameters
      # Analysis to run.
      AnalysisId analysisId

  # Describes some results of an analysis.
  event analysisResult
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Results for different keys. If a reducer was specified, a given key can
      # only appear once in the results emitted for the analysis.
      array of AnalysisEntry results

  # Describes an error that occurred when running an analysis mapper or reducer
  # function. This will not be emitted for every error, but if there was any
  # error then at least one event will be emitted.
  event analysisError
    parameters
      # Associated analysis.
      AnalysisId analysisId
      # Description of the error.
      string error

  # Key for an analysis result. This can be any JSON value. Keys are equivalent
  # if they are structurally equivalent: they have the same contents, though
  # object keys may be ordered differently when stringified.
  type AnalysisKey extends any

  # Value for an analysis result. This can be any JSON value.
  type AnalysisValue extends any

  # A key/value pair produced by an analysis.
  type AnalysisEntry extends object
    properties
      AnalysisKey key
      AnalysisValue value

# The Internal domain is for use by Web Replay's own tools and other software.
# While use of this domain is not restricted, it won't be very helpful for other
# users.
domain Internal

  # Add text to the server side log for this connection.
  command log
    parameters
      # Text to log. This must not contain identifying information about the
      # user or website being visited.
      string text
      # Timestamp from Date.now() to associate with this logged text.
      integer time

  # Create a new recording.
  command createRecording
    parameters
      # Build Id of the software which produced the recording.
      Recording.BuildId buildId
    returns
      # Identifier for the recording.
      Recording.RecordingId recordingId

  # Add data to a recording. The next message sent after this must be a binary
  # message with the data described by this message. Uploaded recordings are not
  # explicitly finished; replay sessions created for a recording will include
  # all data which was successfully uploaded.
  command addRecordingData
    parameters
      # ID of the recording data is being added to. This recording must have
      # been produced by a createRecording command previously sent on this
      # connection.
      Recording.RecordingId recordingId
      # Byte offset into the recording's blob of the data being sent.
      integer offset
      # Byte length of the data being sent.
      integer length

  # Add metadata about a recording.
  command addRecordingDescription
    parameters
      # ID of the recording being described.
      Recording.RecordingId recordingId
      # Total byte length of the recording.
      integer length
      # Duration of the entire recording.
      Recording.TimeStamp duration
      # Mime type for graphics data at the end of the recording.
      optional Graphics.MimeType lastScreenMimeType
      # Raw graphics data for the end of the recording.
      optional string lastScreenData
