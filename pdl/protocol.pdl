version
  major 0
  minor 1

# The Recording domain defines methods for managing recordings.
domain Recording

  # Globally unique identifier for a recording.
  type RecordingID extends string

  # Unique identifier for the software used to produce a recording.
  type BuildID extends string

  # A point in time within a recording, specified as the elapsed time in
  # milliseconds since the recording started. Sub-millisecond resolution
  # is possible.
  type TimeStamp extends number

  # Description for a range of time within a recording.
  type TimeRange extends object
    properties
      TimeStamp begin
      TimeStamp end

  # Identifier for a point within a recording at which the program state can be
  # inspected. Execution points are integers encoded as base-10 numeric strings,
  # such that smaller numbered points precede larger numbered ones. They can be
  # compared by e.g. converting to BigInts and then comparing those BigInts.
  type ExecutionPoint extends string

  # An execution point and its associated time stamp. Recordings always have a
  # beginning execution point with value "0" and a time stamp of zero.
  type TimeStampedPoint extends object
    properties
      ExecutionPoint point
      TimeStamp time

  # A mouse event that occurs somewhere in a recording.
  type MouseEvent extends TimeStampedPoint
    properties
      # Kind of mouse event.
      MouseEventKind kind
      # X coordinate of the event, relative to the upper left of the page's main window.
      integer clientX
      # Y coordinate of the event, relative to the upper left of the page's main window.
      integer clientY

  # Kinds of mouse events described in a recording.
  type MouseEventKind extends string
    enum
      mousemove
      mousedown

  # Get a description of a recording.
  command getDescription
    parameters
      # Recording to get the description for.
      RecordingID recordingId
    returns
      # Duration of the recording.
      TimeStamp duration
      # Painted graphics at the end of the recording.
      optional Graphics.ScreenShot lastScreen

  # Create a session for inspecting a recording.
  command createSession
    parameters
      # Recording to load into the session.
      RecordingID recordingId
    returns
      # Identifier for the new session.
      Session.SessionID sessionId

  # Release a session and allow its resources to be reclaimed.
  command releaseSession
    parameters
      # Session to release.
      Session.SessionID sessionId

# The Session domain defines methods for using recording sessions. In order to
# inspect a recording, it must first be loaded into a session via
# <code>Recording.createSession</code>.
#
# After the session is created, it is an unprocessed state. Commands sent using
# the session to query information about the recording will only find
# information about parts of the recording that have been processed. Processing
# starts automatically after the session is created.
#
# <br><br>All commands and events in this domain must include a <code>sessionId</code>.
domain Session

  # Unique identifier for a session which a recording has been loaded into.
  type SessionID extends string

  # Does not return until the recording is fully processed. Before returning,
  # <code>missingRegions</code> and <code>unprocessedRegions</code> events will
  # be periodically emitted.
  command ensureProcessed

  # Event describing regions of the recording that have not been uploaded.
  event missingRegions
    parameters
      # Regions that have not been uploaded.
      array of Recording.TimeRange regions

  # Event describing regions of the recording that have not been processed.
  event unprocessedRegions
    parameters
      # Any missing regions are also unprocessed regions.
      array of Recording.TimeRange regions

  # Find all points in the recording at which a mouse move or click occurred.
  # Does not return until the recording is fully processed. Before returning,
  # <code>mouseEvents</code> events will be periodically emitted. The union
  # of all these events describes all mouse events in the recording.
  command findMouseEvents

  # Describes some mouse events that occur in the recording.
  event mouseEvents
    parameters
      array of Recording.MouseEvent events

# The Graphics domain defines methods for accessing a recording's graphics data.
#
# <br><br>All commands and events in this domain must include a <code>sessionId</code>.
domain Graphics

  # Find all points in the recording at which paints occurred. Does not return
  # until the recording is fully processed. Before returning,
  # <code>paintPoints</code> events will be periodically emitted. The union
  # of all these events describes all paint points in the recording.
  command findPaints

  # Describes some points in the recording at which paints occurred. No paint
  # will occur for the recording's beginning execution point.
  event paintPoints
    parameters
      array of Recording.TimeStampedPoint paints

  # Get the graphics at a point where a paint occurred.
  command getPaintContents
    parameters
      # Execution point to get the graphics for. This must have been listed in
      # a paintPoints event.
      Recording.ExecutionPoint point
      # Desired encoding format for the returned screen.
      MimeType mimeType
    returns
      # Screen shot of the rendered graphics. The encoding of this screen shot
      # is not required to match the <code>mimeType</code> parameter.
      ScreenShot screen

  # Graphics encoding format.
  type MimeType extends string
    enum
      image/jpeg
      image/png

  # Compact hash code for a screen shot.
  type ScreenShotHash extends string

  # Screen shot of the graphics rendered at some point.
  type ScreenShot extends object
    properties
      # Encoding used for the graphics data.
      MimeType mimeType
      # Hash code for the graphics data.
      ScreenShotHash hash
      # Raw graphics data encoded in base64. This is omitted if another screen
      # shot with the same hash was returned in an earlier message on the
      # connection.
      optional string data

# The Internal domain is for use by Web Replay's own tools and other software.
# While use of this domain is not restricted, it won't be very helpful for other
# users.
domain Internal

  # Add text to the server side log for this connection.
  command log
    parameters
      # Text to log. This must not contain identifying information about the
      # user or website being visited.
      string text
      # Timestamp from Date.now() to associate with this logged text.
      integer time

  # Create a new recording.
  command createRecording
    parameters
      # Build ID of the software which produced the recording.
      Recording.BuildID buildId
    returns
      # Identifier for the recording.
      Recording.RecordingID recordingId

  # Add data to a recording. The next message sent after this must be a binary
  # message with the data described by this message. Uploaded recordings are not
  # explicitly finished; replay sessions created for a recording will include
  # all data which was successfully uploaded.
  command addRecordingData
    parameters
      # ID of the recording data is being added to. This recording must have
      # been produced by a createRecording command previously sent on this
      # connection.
      Recording.RecordingID recordingId
      # Byte offset into the recording's blob of the data being sent.
      integer offset
      # Byte length of the data being sent.
      integer length

  # Add metadata about a recording.
  command addRecordingDescription
    parameters
      # ID of the recording being described.
      Recording.RecordingID recordingId
      # Total byte length of the recording.
      integer length
      # Duration of the entire recording.
      Recording.TimeStamp duration
      # Mime type for graphics data at the end of the recording.
      optional Graphics.MimeType lastScreenMimeType
      # Raw graphics data for the end of the recording.
      optional string lastScreenData
